<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Myue&#39;s Blog</title>
  <subtitle>移动开发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xamarin.xyz/"/>
  <updated>2016-05-02T15:19:51.000Z</updated>
  <id>http://www.xamarin.xyz/</id>
  
  <author>
    <name>Myue</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Activity管理机制详解</title>
    <link href="http://www.xamarin.xyz/2016/05/02/activity3/"/>
    <id>http://www.xamarin.xyz/2016/05/02/activity3/</id>
    <published>2016-05-02T08:12:50.000Z</published>
    <updated>2016-05-02T15:19:51.000Z</updated>
    
    <content type="html">&lt;p&gt;实际开发中，我们的App是由多个Activity构成的，为了能够管理Activity，Android为我们提供了Task的概念，默认情况下一个应用的所有Activity是管理在一个Task中的。Task是一种Stack类型的数据结构，启动App会创建一个Task，Activity特性设置MainLauncher = true或者AndroidManifest中配置了Main和Launcher的Activity会被压入栈中，新启动的Activity会执行入栈操作，关闭的Activity执行出栈操作。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;官方文档给出的一个流程图：&lt;br&gt;&lt;img src=&quot;http://www.runoob.com/wp-content/uploads/2015/08/93537362.jpg&quot; alt=&quot;Back Stack&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Activity启动模式&quot;&gt;&lt;a href=&quot;#Activity启动模式&quot; class=&quot;headerlink&quot; title=&quot;Activity启动模式&quot;&gt;&lt;/a&gt;Activity启动模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Activity的启动模式（launchMode）也是Task管理的一部分，这里单独拿出来介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Activity总共有四种启动模式：standard(multiple)(默认)，singleTop，singleTask，singleInstance。合理的使用启动模式可以带给用户更好的使用体验。&lt;/p&gt;
&lt;h2 id=&quot;设置Activity的启动模式&quot;&gt;&lt;a href=&quot;#设置Activity的启动模式&quot; class=&quot;headerlink&quot; title=&quot;设置Activity的启动模式&quot;&gt;&lt;/a&gt;设置Activity的启动模式&lt;/h2&gt;&lt;p&gt;在AndroidManifest.xml &lt;activity&gt;标签的一个属性中设置launchMode，如下：&lt;/activity&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;android:label&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;singleTask launchMode&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;android:launchMode&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;singleTask&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在Xamarin.Android开发过程中，我们不会过多的操作AndroidManifest.xml文件，设置启动模式通过设置Activity特定的值实现，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Activity (Label = &amp;quot;Activity2&amp;quot;,LaunchMode=Android.Content.PM.LaunchMode.SingleTop)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以通过启动Activity时，为Intent设置flag实现：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;intent.AddFlags(ActivityFlags.SingleTop);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;启动模式介绍&quot;&gt;&lt;a href=&quot;#启动模式介绍&quot; class=&quot;headerlink&quot; title=&quot;启动模式介绍&quot;&gt;&lt;/a&gt;启动模式介绍&lt;/h2&gt;&lt;p&gt;先看一下各个启动模式的总结介绍：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MyueX/MyueX.github.io/master/attach/activity/launchMode.png&quot; alt=&quot;launchMode&quot;&gt;&lt;/p&gt;
&lt;p&gt;启动模式详解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;standard模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标准启动模式.在这种模式下启动的Activity可以被多次实例化.如果Activity A的启动模式为standard，并且A已经启动，在A中再次启动Activity A，会在A的上面再次启动一个A的实例，即当前的桟中的状态为A–&amp;gt;A。&lt;br&gt;&lt;img src=&quot;http://www.jcodecraeer.com/uploads/20150520/1432087372621766.jpg&quot; alt=&quot;standard模式&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;singleTop模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个以singleTop模式启动的Activity的实例已经存在于栈顶,当我们再次启动这个Activity时，不会重新创建而是调用onNewIntent方法，重用栈顶的实例。如果A的启动模式为singleTop，并且A的一个实例已经存在于栈顶中， 启动A Activity不会再次创建A的实例，而是调用原来实例的onNewIntent方法，重用原来的实例，保证栈顶只有一个A的实例。 这时任务栈中还是只有一个A的实例。如果A Activity的一个实例已经存在与任务栈中，但是不在栈顶，那么它和standard模式相同，也会创建多个实例。&lt;br&gt;&lt;img src=&quot;http://www.jcodecraeer.com/uploads/20150520/1432087389219419.jpg&quot; alt=&quot;singleTop模式&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;singleTask模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A Activity的启动模式设置为singleTask，启动Activity A时，检测当前Task是否有A的实例，没有则创建A的实例压入栈中，如果已经有了A的实例，则调用onNewIntent方法重用该实例，其如果A实例不位于栈顶，则将A之上的Activity对象出栈使A的实例位于栈顶。&lt;br&gt;&lt;img src=&quot;http://www.jcodecraeer.com/uploads/20150520/1432087394416117.jpg&quot; alt=&quot;singleTask模式&quot;&gt;&lt;/p&gt;
&lt;p&gt;尝试设置taskAffinity（后面介绍）的值，出现如图效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MyueX/MyueX.github.io/master/attach/activity/taskAffinity.gif&quot; alt=&quot;taskAffinity&quot;&gt;&lt;/p&gt;
&lt;p&gt;设置taskAffinity项目运行失败，提示Deployment failed. Internal error.修改taskAffinity为如下形式才可运行：TaskAffinity = “aaa.bbbb”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;singleTop模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论从哪个Task启动Activity都只会创建一个Activity实例,并将它加入新的Task栈,当再次启动该activity的实例时，会重用已存在的任务和实例&lt;br&gt;&lt;img src=&quot;http://www.jcodecraeer.com/uploads/20150520/1432087655129646.jpg&quot; alt=&quot;singleTop模式&quot;&gt;&lt;/p&gt;
&lt;p&gt;测试singleTop运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MyueX/MyueX.github.io/master/attach/activity/singInstance.gif&quot; alt=&quot;singleTop&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过title区分Activity，可以看到以singleTop模式启动Acvity2当我们按下Home键，重新点击图标启动应用，应用重新启动Activity1，第二种情况我们在任务列表返回应用，返回Activity2，按下Back并没有返回Activity1，而是直接退出应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Task的管理&quot;&gt;&lt;a href=&quot;#Task的管理&quot; class=&quot;headerlink&quot; title=&quot;Task的管理&quot;&gt;&lt;/a&gt;Task的管理&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;查看Activity的堆栈信息  adb shell dumpsys activity&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;activity中&gt;我们可以使用的Task管理相关的属性如下：&lt;/activity中&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;taskAffinity&lt;/li&gt;
&lt;li&gt;launchMode&lt;/li&gt;
&lt;li&gt;llowTaskReparenting&lt;/li&gt;
&lt;li&gt;clearTaskOnLaunch&lt;/li&gt;
&lt;li&gt;alwaysRetainTaskState&lt;/li&gt;
&lt;li&gt;finishOnTaskLaunch&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;taskAffinity介绍&quot;&gt;&lt;a href=&quot;#taskAffinity介绍&quot; class=&quot;headerlink&quot; title=&quot;taskAffinity介绍&quot;&gt;&lt;/a&gt;taskAffinity介绍&lt;/h2&gt;&lt;p&gt;通常一个应用中所有的Activity有相同的affinity，即拥有相同taskAffinity值的Activity值属于同一个Task。 不同应用程序中的Activity可以拥有相同的Affinity，同一个应用程序中不同Activity 也可以设置成不同的Affinity。taskAffinity的使用会有下面两种情况：&lt;/p&gt;
&lt;p&gt;1）当传递给StartActivity()的Intent对象包含 FLAG_ACTIVITY_NEW_TASK标记时，系统会为需要启动的Activity寻找与当前Activity不同Task。如果要启动的 Activity的Affinity属性与当前所有的Task的Affinity属性都不相同，系统会新建一个带那个Affinity属性的Task，并将要启动的Activity压到新建的Task栈中；否则将Activity压入那个Affinity属性相同的栈中。&lt;/p&gt;
&lt;p&gt;2）allowTaskReparenting属性设置为true 如果一个activity的allowTaskReparenting属性为true， 那么它可以从一个Task移到另外一个有相同Affinity的Task中，更换从属的Task。 如果一个.apk文件从用户角度来看包含了多个”应用程序”，你可能需要对那些 Activity赋不同的Affinity值。&lt;/p&gt;
&lt;h2 id=&quot;栈的管理&quot;&gt;&lt;a href=&quot;#栈的管理&quot; class=&quot;headerlink&quot; title=&quot;栈的管理&quot;&gt;&lt;/a&gt;栈的管理&lt;/h2&gt;&lt;p&gt;当应用长时间置于后台，系统可能会清理应用Task栈中的Activity，当用户返回应用保留的只有应用的启动Activity。通过以下设置改变这种行为！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;alwaysRetainTaskState： 如果栈底Activity的这个属性被设置为true，Task中的所有activity将被长时间保存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;clearTaskOnLaunch:如果栈底activity的这个属性被设置为true，一旦用户离开Task， 则 Task栈中的Activity将被清空到只剩下栈底activity。这种情况刚好与 alwaysRetainTaskState相反。即使用户只是短暂地离开，task也会返回到初始状态 （只剩下栈底acitivty）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;finishOnTaskLaunch:与clearTaskOnLaunch相似，但它只对单独的activity起作用，而不是整个Task。它可以结束任何Activity，包括栈底的Activity。 当它设置为true时，当前的Activity只在当前会话期间作为Task的一部分存在， 当用户按下Home键重新点击图标启动应用，它将不存在。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;实际开发中，我们的App是由多个Activity构成的，为了能够管理Activity，Android为我们提供了Task的概念，默认情况下一个应用的所有Activity是管理在一个Task中的。Task是一种Stack类型的数据结构，启动App会创建一个Task，Activity特性设置MainLauncher = true或者AndroidManifest中配置了Main和Launcher的Activity会被压入栈中，新启动的Activity会执行入栈操作，关闭的Activity执行出栈操作。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.xamarin.xyz/categories/Android/"/>
    
    
      <category term="Activity" scheme="http://www.xamarin.xyz/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>Xamarin.Android Activity用例介绍</title>
    <link href="http://www.xamarin.xyz/2016/04/29/activity2/"/>
    <id>http://www.xamarin.xyz/2016/04/29/activity2/</id>
    <published>2016-04-29T07:08:21.000Z</published>
    <updated>2016-05-02T02:59:15.000Z</updated>
    
    <content type="html">&lt;p&gt;#Activity间传递数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Activity间传递数据是借助Intent（内部为Bundle）实现的&lt;/p&gt;
&lt;p&gt;在使用Bundle传递数据时，要注意，Bundle的大小是有限制的小于0.5MB，如果大于这个值 是会报TransactionTooLargeException异常的！！！（未验证）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Activiy数据单向传递&quot;&gt;&lt;a href=&quot;#Activiy数据单向传递&quot; class=&quot;headerlink&quot; title=&quot;Activiy数据单向传递&quot;&gt;&lt;/a&gt;Activiy数据单向传递&lt;/h2&gt;&lt;h3 id=&quot;简单数据传递&quot;&gt;&lt;a href=&quot;#简单数据传递&quot; class=&quot;headerlink&quot; title=&quot;简单数据传递&quot;&gt;&lt;/a&gt;简单数据传递&lt;/h3&gt;&lt;p&gt;Activity1传递数据代码：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (Activity2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra (&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Activity2接受数据代码：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = Intent.GetStringExtra (&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;传递对象数据&quot;&gt;&lt;a href=&quot;#传递对象数据&quot; class=&quot;headerlink&quot; title=&quot;传递对象数据&quot;&gt;&lt;/a&gt;传递对象数据&lt;/h3&gt;&lt;p&gt;使用Intent传递对象，该对象必须是可被序列化的对象。序列化对象有两种方式：Java.IO.ISerializable和android.os.Parcelable，从命名空间可以看出Serializable是Java提供的，而Parcelable是Google在Android中为我们定义的。在内存使用方面Parcelable比Serializable性能高，而Serializable可将数据持久化方便保存，所以在需要保存或网络传输数据时选择Serializable。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0204/2410.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android系统中Parcelable和Serializable的区别&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Serializable方式&quot;&gt;&lt;a href=&quot;#Serializable方式&quot; class=&quot;headerlink&quot; title=&quot;Serializable方式&quot;&gt;&lt;/a&gt;Serializable方式&lt;/h4&gt;&lt;p&gt;定义传递的对象，注意代码中的注释&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TestModel : Java.Lang.Object, ISerializable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//这里不确定这么定义是否有效 参考下面两个链接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//https://developer.xamarin.com/api/field/Java.Security.Key.SerialVersionUID/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//http://blog.csdn.net/hackingwu/article/details/26148543&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public const System.Int64 SerialVersionUID = 6603384152749567611;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//必须实现该构造函数 否则抛异常 No constructor found for .ctor(System.IntPtr, Android.Runtime.JniHandleOwnership)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public TestModel (IntPtr handle, JniHandleOwnership transfer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			: base (handle, transfer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public TestModel ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public string Name &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			get;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			set;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//必须的 否则获取到的对象都为默认值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//https://developer.xamarin.com/api/type/Java.IO.ISerializable/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[Export (&quot;readObject&quot;, Throws = new [] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			typeof(Java.IO.IOException),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			typeof(Java.Lang.ClassNotFoundException)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private void ReadObject (ObjectInputStream source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Name = source.ReadUTF ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[Export (&quot;writeObject&quot;, Throws = new [] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			typeof(Java.IO.IOException),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			typeof(Java.Lang.ClassNotFoundException)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private void WriteObject (ObjectOutputStream destination)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			destination.WriteUTF (Name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;传递数据代码：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(Activity2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	intent.PutExtra (&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TestModel () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Name = &lt;span class=&quot;string&quot;&gt;&quot;TestName&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接收数据代码：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; model = Intent.GetSerializableExtra (&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; TestModel;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Parcelable方式&quot;&gt;&lt;a href=&quot;#Parcelable方式&quot; class=&quot;headerlink&quot; title=&quot;Parcelable方式&quot;&gt;&lt;/a&gt;Parcelable方式&lt;/h4&gt;&lt;p&gt;Xamarin 官方文档有这样一段说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interface for classes whose instances can be written to and restored from a Parcel. Classes implementing the Parcelable interface must also have a non-null static field called CREATOR of a type that implements the IParcelableCreator interface.&lt;br&gt;不光要实现IParcelable接口的方法还要定义一个实现了IParcelableCreator接口的静态字段。&lt;br&gt;首先看一下传递对象的定义：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TestModel : Java.Lang.Object,IParcelable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public string Name &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			get;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			set;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//内容接口描述，默认返回0就可以;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public int DescribeContents ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//将传递的数据打包到Parcel容器中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void WriteToParcel (Parcel dest, ParcelableWriteFlags flags)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dest.WriteString (Name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[ExportField (&quot;CREATOR&quot;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public static ParcelableCreator InitializeCreator ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return new ParcelableCreator ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public class ParcelableCreator : Java.Lang.Object, IParcelableCreator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			public Java.Lang.Object CreateFromParcel (Parcel source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				return new TestModel () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Name = source.ReadString ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			public Java.Lang.Object[] NewArray (int size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				return new Java.Lang.Object [size];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;传递数据代码相同，改变传入的对象即可。&lt;/p&gt;
&lt;p&gt;获取数据代码用GetParcelableExtra方法代替GetSerializableExtra&lt;/p&gt;
&lt;h2 id=&quot;Activity之间数据回传&quot;&gt;&lt;a href=&quot;#Activity之间数据回传&quot; class=&quot;headerlink&quot; title=&quot;Activity之间数据回传&quot;&gt;&lt;/a&gt;Activity之间数据回传&lt;/h2&gt;&lt;p&gt;1、用StartActivityForResult代替StartActivity启动Activity。&lt;/p&gt;
&lt;p&gt;2、在启动的Activity中重写OnActivityResult方法&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OnActivityResult&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; requestCode, Result resultCode, Intent data&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;base&lt;/span&gt;.OnActivityResult (requestCode, resultCode, data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;requestCode用来区分由Activity的启动方式，如两个按钮起动Activity并传递不同的数据，在OnActivityResult方法中我们可以通过比较requestCode来区分由哪个按钮起动的Activty返回的数据。&lt;/p&gt;
&lt;p&gt;3、在被启动的Activty返回到启动的Activity之前调用SetResult方法指定resultCode和返回的数据。&lt;/p&gt;
&lt;h1 id=&quot;双击退出程序&quot;&gt;&lt;a href=&quot;#双击退出程序&quot; class=&quot;headerlink&quot; title=&quot;双击退出程序&quot;&gt;&lt;/a&gt;双击退出程序&lt;/h1&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义变量保存点击的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; exitTime = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OnKeyDown&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;Android.Views.Keycode keyCode, Android.Views.KeyEvent e&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//可以C#中(System.DateTime.Now - System.DateTime.Parse (&quot;1970-1-1&quot;)).TotalMilliseconds 代替JavaSystem.CurrentTimeMillis ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (keyCode == Android.Views.Keycode.Back) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((JavaSystem.CurrentTimeMillis () - exitTime) &amp;gt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Toast.MakeText (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;再按一次退出应用程序&quot;&lt;/span&gt;, ToastLength.Short).Show ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				exitTime = JavaSystem.CurrentTimeMillis ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;//Exit ();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;base&lt;/span&gt;.OnKeyDown (keyCode, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;为Activity设置过场动画&quot;&gt;&lt;a href=&quot;#为Activity设置过场动画&quot; class=&quot;headerlink&quot; title=&quot;为Activity设置过场动画&quot;&gt;&lt;/a&gt;为Activity设置过场动画&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在Activity切换时我们可以加上各种跳转动画，如淡入淡出，放大缩小，左右互推等！这里简单介绍如何设置Activity跳转的动画。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;准备工作：在Resources目录下创建anim目录，并在anim目录下定义动画效果（先不做介绍）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/MyueX/MyueX.github.io/blob/master/attach/Activity%E5%B8%B8%E7%94%A8%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB.zip?raw=true&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity常用过度动画&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码设置&quot;&gt;&lt;a href=&quot;#代码设置&quot; class=&quot;headerlink&quot; title=&quot;代码设置&quot;&gt;&lt;/a&gt;代码设置&lt;/h2&gt;&lt;p&gt;在StartActivity或Finish后面加上OverridePendingTransition(enterAnim,exitAnim);&lt;br&gt;enterAnim:进入Activity的动画&lt;br&gt;exitAnim:退出Activity的动画&lt;/p&gt;
&lt;h2 id=&quot;style设置&quot;&gt;&lt;a href=&quot;#style设置&quot; class=&quot;headerlink&quot; title=&quot;style设置&quot;&gt;&lt;/a&gt;style设置&lt;/h2&gt;&lt;p&gt;通过style进行配置是全局的，所有的Activity都会加载这个动画&lt;/p&gt;
&lt;p&gt;①在style.xml中自定义style：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 默认Activity跳转动画 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;default_animation&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;mce_bogus&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;parent&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@android:style/Animation.Activity&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android:activityOpenEnterAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/default_anim_in&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android:activityOpenExitAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/anim_stay&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android:activityCloseEnterAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/anim_stay&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android:activityCloseExitAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/default_anim_out&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4个item分别代表:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity A跳转到Activity B时Activity B进入动画&lt;/li&gt;
&lt;li&gt;Activity A跳转到Activity B时Activity A退出动画&lt;/li&gt;
&lt;li&gt;Activity B返回Activity A时Activity A的进入动画&lt;/li&gt;
&lt;li&gt;Activity B返回Activity A时ActivityB的退出动画&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;②AppTheme怎加如下节点:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android:windowAnimationStyle&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@style/default_animation&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;③AndroidManifest文件中找到application节点，增加主题设置&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android:theme=&quot;@style/AppTheme&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;定义对话框风格的Activity&quot;&gt;&lt;a href=&quot;#定义对话框风格的Activity&quot; class=&quot;headerlink&quot; title=&quot;定义对话框风格的Activity&quot;&gt;&lt;/a&gt;定义对话框风格的Activity&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;通常Activity是占满全屏的，根据需要我们可以将Activity设置成对话框风格的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设置Activity的theme为“@android:style/Theme.Dialog”。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;#Activity间传递数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Activity间传递数据是借助Intent（内部为Bundle）实现的&lt;/p&gt;
&lt;p&gt;在使用Bundle传递数据时，要注意，Bundle的大小是有限制的小于0.5MB，如果大于这个值 是会报TransactionTooLargeException异常的！！！（未验证）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.xamarin.xyz/categories/Android/"/>
    
    
      <category term="Activity" scheme="http://www.xamarin.xyz/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>Xamarin.Android Activity入门介绍</title>
    <link href="http://www.xamarin.xyz/2016/04/28/activity1/"/>
    <id>http://www.xamarin.xyz/2016/04/28/activity1/</id>
    <published>2016-04-28T06:29:02.000Z</published>
    <updated>2016-05-02T02:58:58.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文将对Android四大组件之一的Activity进行简单介绍。&lt;/p&gt;
&lt;p&gt;Activity是一个应用程序的组件，他在屏幕上提供了一个区域，允许用户在上面做一些交互性的操作， 比如打电话，照相，发送邮件，或者显示一个地图！Activity可以理解成一个绘制用户界面的窗口， 而这个窗口可以填满整个屏幕，也可能比屏幕小或者浮动在其他窗口的上方！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Activity生命周期介绍&quot;&gt;&lt;a href=&quot;#Activity生命周期介绍&quot; class=&quot;headerlink&quot; title=&quot;Activity生命周期介绍&quot;&gt;&lt;/a&gt;Activity生命周期介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://developer.xamarin.com/guides/android/application_fundamentals/activity_lifecycle/Images/image2.png&quot; alt=&quot;Activity生命周期&quot;&gt;&lt;/p&gt;
&lt;p&gt;建议自己写Demo查看各个生命周期调用时间。&lt;/p&gt;
&lt;h2 id=&quot;OnCreate&quot;&gt;&lt;a href=&quot;#OnCreate&quot; class=&quot;headerlink&quot; title=&quot;OnCreate&quot;&gt;&lt;/a&gt;OnCreate&lt;/h2&gt;&lt;p&gt;当Activity创建时会调用此方法，是我们必须要重写的方法，该方法传入一个Bundle对象作为参数。如果bundle不为null，说明当前Activity是重新启动。可以通过bundle读取我们之前保存的数据，做相应的数据恢复工作。在这个方法中要执行的操作是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Creating views&lt;/p&gt;
&lt;p&gt;Initializing variables&lt;/p&gt;
&lt;p&gt;Binding static data to lists&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;OnStart&quot;&gt;&lt;a href=&quot;#OnStart&quot; class=&quot;headerlink&quot; title=&quot;OnStart&quot;&gt;&lt;/a&gt;OnStart&lt;/h2&gt;&lt;p&gt;OnCreate执行结束会掉用OnStart方法，可以根据具体应用情况重写该方法。&lt;/p&gt;
&lt;h2 id=&quot;OnResume&quot;&gt;&lt;a href=&quot;#OnResume&quot; class=&quot;headerlink&quot; title=&quot;OnResume&quot;&gt;&lt;/a&gt;OnResume&lt;/h2&gt;&lt;p&gt;当一个Activity初始化完成准备显示给用户时会掉用OnResume方法。此时Activity进入活动状态。在这个方法中我们要做的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ramping up frame rates (a common task in game building)&lt;/p&gt;
&lt;p&gt;Starting animations&lt;/p&gt;
&lt;p&gt;Listening for GPS updates&lt;/p&gt;
&lt;p&gt;Display any relevant alerts or dialogs&lt;/p&gt;
&lt;p&gt;Wire up external event handlers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;OnPause&quot;&gt;&lt;a href=&quot;#OnPause&quot; class=&quot;headerlink&quot; title=&quot;OnPause&quot;&gt;&lt;/a&gt;OnPause&lt;/h2&gt;&lt;p&gt;当Activity进入后台或者Activity被遮挡时（Dialog风格的Activity）掉用此方法。OnPause方法之行过后Activity可以有两种不同的状态，进入OnResume返回前台或者进入OnStop方法，重写这个方法我们要做的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Commit unsaved changes to persistent data&lt;/p&gt;
&lt;p&gt;Destroy or clean up other objects consuming resources&lt;/p&gt;
&lt;p&gt;Ramp down frame rates and pausing animations&lt;/p&gt;
&lt;p&gt;Unregister external event handlers or notification handlers (i.e. those that are tied to a service). This must be done to prevent Activity memory leaks.&lt;/p&gt;
&lt;p&gt;Likewise, if the Activity has displayed any dialogs or alerts, they must be cleaned up with the .Dismiss() method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后一条，如果不关闭已经显示的Dialog会抛异常。&lt;/p&gt;
&lt;h2 id=&quot;OnStop&quot;&gt;&lt;a href=&quot;#OnStop&quot; class=&quot;headerlink&quot; title=&quot;OnStop&quot;&gt;&lt;/a&gt;OnStop&lt;/h2&gt;&lt;p&gt;Activity不再显示时调用此方法，此时Activity仍存留在内存中。&lt;/p&gt;
&lt;h2 id=&quot;OnDestroy&quot;&gt;&lt;a href=&quot;#OnDestroy&quot; class=&quot;headerlink&quot; title=&quot;OnDestroy&quot;&gt;&lt;/a&gt;OnDestroy&lt;/h2&gt;&lt;p&gt;Activity销毁调用次方法，此时Activity已经完全从内存中移除，我们应该重写此方法，释放占用的资源。&lt;/p&gt;
&lt;h2 id=&quot;OnRestart&quot;&gt;&lt;a href=&quot;#OnRestart&quot; class=&quot;headerlink&quot; title=&quot;OnRestart&quot;&gt;&lt;/a&gt;OnRestart&lt;/h2&gt;&lt;p&gt;是OnStop状态的Activity重新显示给用户会进入OnRestart方法。如按下Home键应用进入后台，重新打开应用，Activity重新启动。&lt;/p&gt;
&lt;h1 id=&quot;Activity使用&quot;&gt;&lt;a href=&quot;#Activity使用&quot; class=&quot;headerlink&quot; title=&quot;Activity使用&quot;&gt;&lt;/a&gt;Activity使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Android中的四大组件，只要你定义了就必须在AndroidManifest.xml中对这个组件进行声明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;定义Activity&quot;&gt;&lt;a href=&quot;#定义Activity&quot; class=&quot;headerlink&quot; title=&quot;定义Activity&quot;&gt;&lt;/a&gt;定义Activity&lt;/h2&gt;&lt;p&gt;我们自定义的Activity一定要继承Activity或其子类（如AppCompatActivity），并重写相关方法。OnCreate是必须重写的，在OnCreate中调用SetContentView方法加载相关联的视图。&lt;/p&gt;
&lt;h2 id=&quot;声明Activity&quot;&gt;&lt;a href=&quot;#声明Activity&quot; class=&quot;headerlink&quot; title=&quot;声明Activity&quot;&gt;&lt;/a&gt;声明Activity&lt;/h2&gt;&lt;p&gt;在AndroidManifest中增加Activity节点。&lt;br&gt;&lt;a href=&quot;http://www.android-doc.com/guide/topics/manifest/activity-element.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin.Android中我们可以通过声明特性进行组件的声明。&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Activity (Label = &lt;span class=&quot;string&quot;&gt;&quot;activity1&quot;&lt;/span&gt;, MainLauncher = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, Icon = &lt;span class=&quot;string&quot;&gt;&quot;@mipmap/icon&quot;&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;项目编译时会根据我们声明的特性生成新的AndroidManifest.xml文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可在项目目录下 /项目名/obj/Debug or Release/android下查看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;启动Activity&quot;&gt;&lt;a href=&quot;#启动Activity&quot; class=&quot;headerlink&quot; title=&quot;启动Activity&quot;&gt;&lt;/a&gt;启动Activity&lt;/h2&gt;&lt;p&gt;启动方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显式启动 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent (this, typeof(Activity2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;StartActivity(typeof(Activity2));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Intent对象可以在两个Activity间传递数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐式启动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;给出Java示例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.runoob.com/wp-content/uploads/2015/08/291262381.jpg&quot; alt=&quot;隐式启动&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;生命周期中状态的保存&quot;&gt;&lt;a href=&quot;#生命周期中状态的保存&quot; class=&quot;headerlink&quot; title=&quot;生命周期中状态的保存&quot;&gt;&lt;/a&gt;生命周期中状态的保存&lt;/h1&gt;&lt;h2 id=&quot;Bundle保存状态&quot;&gt;&lt;a href=&quot;#Bundle保存状态&quot; class=&quot;headerlink&quot; title=&quot;Bundle保存状态&quot;&gt;&lt;/a&gt;Bundle保存状态&lt;/h2&gt;&lt;p&gt;通过OnSaveInstanceState、OnRestoreInstanceState两个方法管理保存的状态（不是一定会执行的）&lt;/p&gt;
&lt;p&gt;以下代码，改变默认创建的Android项目，是一个简单保存状态的例子，可以通过横竖屏切换掉用OnSaveInstanceState、OnRestoreInstanceState方法。（这里提到横竖屏切换，我们可以为一个Activity分别提供不同情况下的布局文件，创建两个布局文件夹：layout-land横屏,layout-port竖屏 然后把两套布局文件丢这两文件夹里，文件名一样，Android就会自行判断加载相应布局）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Activity (Label = &amp;quot;activity1&amp;quot;, MainLauncher = true, Icon = &amp;quot;@mipmap/icon&amp;quot;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public class MainActivity : Activity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int count = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Button button;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		protected override void OnCreate (Bundle savedInstanceState)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			base.OnCreate (savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// Set our view from the &amp;quot;main&amp;quot; layout resource&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			SetContentView (Resource.Layout.Main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// Get our button from the layout resource,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// and attach an event to it&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			button = FindViewById&amp;lt;Button&amp;gt; (Resource.Id.myButton);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			button.Click += delegate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				button.Text = string.Format (&amp;quot;&amp;#123;0&amp;#125; clicks!&amp;quot;, count++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		protected override void OnSaveInstanceState (Bundle outState)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			base.OnSaveInstanceState (outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			outState.PutInt (&amp;quot;count&amp;quot;, count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		protected override void OnRestoreInstanceState (Bundle savedInstanceState)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			base.OnRestoreInstanceState (savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			count = savedInstanceState.GetInt (&amp;quot;count&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			button.Text = string.Format (&amp;quot;&amp;#123;0&amp;#125; clicks!&amp;quot;, count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;事实上我们并不需要在OnSaveInstanceState方法中保存每个view的状态，只要指定view的ID，android系统会自动帮我们保存view的状态，如我们在布局文件中了添加一个EditText视图，并指定ID属性，运行项目，修改EditText的值，切换屏幕方向EditText中的值依然保存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.xamarin.com/guides/android/application_fundamentals/activity_lifecycle/Images/image3-sml.png&quot; alt=&quot;Bundle State&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图所示，Activity由Resumed状态变为Destroyed状态可能会调用OnSaveInstanceState方法，Created到Resumed可能会调用OnRestoreInstanceState方法。&lt;/p&gt;
&lt;p&gt;使用Bundle保存状态的限制&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is not called in all cases. For example, pressing home or back to exit an Activity will not result in OnSaveInstanceState being called.&lt;/p&gt;
&lt;p&gt;The bundle passed into OnSaveInstanceState is not designed for large objects, such as images. In the case of large objects, saving the object from OnRetainNonConfigurationInstance is preferable, as discussed below.&lt;/p&gt;
&lt;p&gt;Data saved by using the bundle is serialized, which can lead to delays.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;复杂数据的持久化&quot;&gt;&lt;a href=&quot;#复杂数据的持久化&quot; class=&quot;headerlink&quot; title=&quot;复杂数据的持久化&quot;&gt;&lt;/a&gt;复杂数据的持久化&lt;/h2&gt;&lt;p&gt;由于Bundle的限制，只适合保存简单的数据值如：int，string等。对于复杂数据的保存我们可以通过重写OnRetainNonConfigurationInstance返回一个Java.Lang.Object，恢复数据时LastNonConfigurationInstance返回保存的数据。这里列出一个Xamarin官网的例子：&lt;/p&gt;
&lt;p&gt;1.先定义我们要返回的类型&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class TweetListWrapper : Java.Lang.Object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public string[] Tweets &amp;#123; get; set; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.Activity中处理数据&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TweetListWrapper _savedInstance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		protected override void OnCreate (Bundle bundle)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			base.OnCreate (bundle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var tweetsWrapper = LastNonConfigurationInstance as TweetListWrapper;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if (tweetsWrapper != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				PopulateTweetList (tweetsWrapper.Tweets);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				SearchTwitter (&amp;quot;xamarin&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void SearchTwitter (string text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			string searchUrl = String.Format (&amp;quot;http://search.twitter.com/search.json?&amp;quot; + &amp;quot;q=&amp;#123;0&amp;#125;&amp;amp;rpp=10&amp;amp;include_entities=false&amp;amp;&amp;quot; + &amp;quot;result_type=mixed&amp;quot;, text);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Console.WriteLine (searchUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var httpReq = (HttpWebRequest)HttpWebRequest.Create (new Uri (searchUrl));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			httpReq.BeginGetResponse (new AsyncCallback (ResponseCallback), httpReq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		void ResponseCallback (IAsyncResult ar)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var httpReq = (HttpWebRequest)ar.AsyncState;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			using (var httpRes = (HttpWebResponse)httpReq.EndGetResponse (ar)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ParseResults (httpRes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		void ParseResults (HttpWebResponse httpRes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var s = httpRes.GetResponseStream ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var j = (JsonObject)JsonObject.Load (s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var results = (from result in (JsonArray)j [&amp;quot;results&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			               let jResult = result as JsonObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			               select jResult [&amp;quot;text&amp;quot;].ToString ()).ToArray ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			RunOnUiThread (() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				PopulateTweetList (results);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[Obsolete (&amp;quot;deprecated&amp;quot;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public override Java.Lang.Object OnRetainNonConfigurationInstance ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			base.OnRetainNonConfigurationInstance ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Console.WriteLine (&amp;quot;OnRetainNonConfigurationInstance&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return _savedInstance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		void PopulateTweetList (string[] results)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ListAdapter = new ArrayAdapter&amp;lt;string&amp;gt; (this, Android.Resource.Layout.SimpleListItem1, results);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_savedInstance = new TweetListWrapper&amp;#123; Tweets = results &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以注意到OnRetainNonConfigurationInstance方法已经是过期的，查看文档可以看到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Called by the system, as part of destroying an activity due to a configuration change, when it is known that a new instance will immediately be created for the new configuration. You can return any object you like here, including the activity instance itself, which can later be retrieved by calling Activity.LastNonConfigurationInstance in the new activity instance. If you are targeting Build+VERSION_CODES.Honeycomb or later, consider instead using a Fragment with Fragment.RetainInstance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以用Fragment.RetainInstance完成同样的事情。&lt;/p&gt;
&lt;h1 id=&quot;系统提供常用Activity&quot;&gt;&lt;a href=&quot;#系统提供常用Activity&quot; class=&quot;headerlink&quot; title=&quot;系统提供常用Activity&quot;&gt;&lt;/a&gt;系统提供常用Activity&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//1.拨打电话&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 给移动客服10086拨打电话&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.Parse (&amp;quot;tel:10086&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent (Intent.ActionDial, uri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//2.发送短信&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 给10086发送内容为“Hello”的短信&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.Parse (&amp;quot;smsto:10086&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent (Intent.ActionSendto, uri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra (&amp;quot;sms_body&amp;quot;, &amp;quot;Hello&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//3.发送彩信（相当于发送带附件的短信）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(Intent.ActionSend);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;sms_body&amp;quot;, &amp;quot;Hello&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.Parse(&amp;quot;content://media/external/images/media/23&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(Intent.ExtraStream, uri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetType(&amp;quot;image/png&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//4.打开浏览器:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.Parse (&amp;quot;http://www.baidu.com&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent (Intent.ActionView, uri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//5.多媒体播放:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(Intent.ActionView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.Parse(&amp;quot;file:///sdcard/foo.mp3&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetDataAndType(uri, &amp;quot;audio/mp3&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//6.打开摄像头拍照:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 打开拍照程序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(MediaStore.ActionImageCapture); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivityForResult(intent, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 取出照片数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle extras = intent.Extras; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bitmap bitmap = (Bitmap) extras.Get(&amp;quot;data&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//另一种:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//调用系统相机应用程序，并存储拍下来的照片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(MediaStore.ActionImageCapture); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var time = Calendar.GetInstance().TimeInMillis;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(MediaStore.ExtraOutput, Uri.FromFile(new File(path, time + &amp;quot;.jpg&amp;quot;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivityForResult(intent, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//7.获取并剪切图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取并剪切图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(Intent.ActionGetContent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetType(&amp;quot;image/*&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;crop&amp;quot;, &amp;quot;true&amp;quot;); // 开启剪切&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;aspectX&amp;quot;, 1); // 剪切的宽高比为1：2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;aspectY&amp;quot;, 2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;outputX&amp;quot;, 20); // 保存图片的宽和高&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;outputY&amp;quot;, 40); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;output&amp;quot;, Uri.FromFile(new File(&amp;quot;/mnt/sdcard/temp&amp;quot;))); // 保存路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;outputFormat&amp;quot;, &amp;quot;JPEG&amp;quot;);// 返回格式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivityForResult(intent, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 剪切特定图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(&amp;quot;com.android.camera.action.CROP&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetClassName(&amp;quot;com.android.camera&amp;quot;, &amp;quot;com.android.camera.CropImage&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetData(Uri.FromFile(new File(&amp;quot;/mnt/sdcard/temp&amp;quot;))); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;outputX&amp;quot;, 1); // 剪切的宽高比为1：2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;outputY&amp;quot;, 2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;aspectX&amp;quot;, 20); // 保存图片的宽和高&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;aspectY&amp;quot;, 40);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;scale&amp;quot;, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;noFaceDetection&amp;quot;, true); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;output&amp;quot;, Uri.Parse(&amp;quot;file:///mnt/sdcard/temp&amp;quot;)); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivityForResult(intent, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//8.打开Google Market &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 打开Google Market直接进入该程序的详细页面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.Parse (&amp;quot;market://details?id=&amp;quot; + &amp;quot;com.demo.app&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent (Intent.ActionView, uri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//9.进入手机设置界面:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 进入无线网络设置界面（其它可以举一反三）  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent (Android.Provider.Settings.ActionWirelessSettings);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivityForResult (intent, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//10.安装apk:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri installUri = Uri.FromParts(&amp;quot;package&amp;quot;, &amp;quot;xxx&amp;quot;, null);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent it = new Intent(Intent.ACTION_PACKAGE_ADDED, installUri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity(it);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//11.卸载apk:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.FromParts(&amp;quot;package&amp;quot;, strPackageName, null);      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent it = new Intent(Intent.ACTION_DELETE, uri);      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity(it); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//12.进入联系人页面:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetAction (Intent.ActionView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetData (Android.Provider.ContactsContract.Contacts.ContentUri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//13.查看指定联系人:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri personUri = ContentUris.WithAppendedId (Android.Provider.ContactsContract.Contacts.ContentUri, id);//id联系人ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetAction (Intent.ActionView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetData (personUri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将对Android四大组件之一的Activity进行简单介绍。&lt;/p&gt;
&lt;p&gt;Activity是一个应用程序的组件，他在屏幕上提供了一个区域，允许用户在上面做一些交互性的操作， 比如打电话，照相，发送邮件，或者显示一个地图！Activity可以理解成一个绘制用户界面的窗口， 而这个窗口可以填满整个屏幕，也可能比屏幕小或者浮动在其他窗口的上方！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.xamarin.xyz/categories/Android/"/>
    
    
      <category term="Activity" scheme="http://www.xamarin.xyz/tags/Activity/"/>
    
  </entry>
  
</feed>
