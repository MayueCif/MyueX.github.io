<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Myue&#39;s Blog</title>
  <subtitle>移动开发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xamarin.xyz/"/>
  <updated>2016-05-11T06:38:07.000Z</updated>
  <id>http://www.xamarin.xyz/</id>
  
  <author>
    <name>Myue</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Xamarin.Android 广播接收器使用介绍</title>
    <link href="http://www.xamarin.xyz/2016/05/11/broadcastreceiver/"/>
    <id>http://www.xamarin.xyz/2016/05/11/broadcastreceiver/</id>
    <published>2016-05-11T06:16:57.000Z</published>
    <updated>2016-05-11T06:38:07.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;BroadcastReceiver介绍&quot;&gt;&lt;a href=&quot;#BroadcastReceiver介绍&quot; class=&quot;headerlink&quot; title=&quot;BroadcastReceiver介绍&quot;&gt;&lt;/a&gt;BroadcastReceiver介绍&lt;/h1&gt;&lt;p&gt;BroadcastReceiver就是我们本文要介绍的主角广播接受者，Android四大基本组件之一。本质上是一种全局的监听器，监听系统全局的广播消息，可以接受来自系统和应用的广播。由于BroadcastReceiver是一个全局的监听器，因此可以将它作为不同应用程序间通信的一种手段。系统在特定情况下会发送广播，比如电量低或者充足，刚启动完，插入耳机，输入法改变等都会发送特定广播，这是系统广播，每个APP都会收到，当然我们也可以自己发广播，比如：接到服务端推送信息，用户在别处登录，发送广播强制用户下线回到 登陆界面，并提示在别处登录。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;广播类型介绍&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.runoob.com/wp-content/uploads/2015/08/72916726.jpg&quot; alt=&quot;广播类型&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;接收系统广播&quot;&gt;&lt;a href=&quot;#接收系统广播&quot; class=&quot;headerlink&quot; title=&quot;接收系统广播&quot;&gt;&lt;/a&gt;接收系统广播&lt;/h1&gt;&lt;p&gt;前面也提到过系统会在某些时候发送特定的广播，下面写一个接收系统广播的例子。&lt;/p&gt;
&lt;p&gt;首先要为我们的应用注册一个广播接收器，可以代码注册（动态）或者AndroidManifest中注册（静态）。动态注册广播是借助IntentFilter，通过IntentFilter的AddAction方法指定要监听的广播然后通过RegisterReceiver注册广播监听，动态注册一定要在合适的时候（通常是OnDestroy方法内）调用UnregisterReceiver停止广播监听。动态注册只有当应用程序运行时才能监听到广播，如果想应用程序没有启动仍然可以监听到广播需要使用静态注册，在AndroidManifest.xml中增加&amp;lt; receiver &amp;gt;节点进行静态注册。&lt;/p&gt;
&lt;h2 id=&quot;动态注册&quot;&gt;&lt;a href=&quot;#动态注册&quot; class=&quot;headerlink&quot; title=&quot;动态注册&quot;&gt;&lt;/a&gt;动态注册&lt;/h2&gt;&lt;p&gt;定义MyBroadcastReceiver 继承BroadcastReceiver，重写OnReceive方法完成相关逻辑。&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyBroadcastReceiver&lt;/span&gt;:&lt;span class=&quot;title&quot;&gt;BroadcastReceiver&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;region&lt;/span&gt; implemented abstract members of BroadcastReceiver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OnReceive&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;Context context, Intent intent&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.Console.WriteLine (&lt;span class=&quot;string&quot;&gt;&quot;MyBroadcastReceiver OnReceive&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endregion&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注册广播接收器，这里我们注册的是电量改变广播。&lt;/p&gt;
&lt;p&gt;更多系统广播请参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.android-doc.com/reference/android/content/Intent.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.android-doc.com/reference/android/content/Intent.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;指定IntentFilter的Action为Intent.ActionBatteryChanged。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IntentFilter itFilter = new IntentFilter ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;itFilter.AddAction (Intent.ActionBatteryChanged);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RegisterReceiver (myBoradcastReceiver, itFilter);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;停止广播监听：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UnregisterReceiver (myBoradcastReceiver);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行项目，在模拟器中更改电量会看到对应的输出。&lt;/p&gt;
&lt;h2 id=&quot;静态注册&quot;&gt;&lt;a href=&quot;#静态注册&quot; class=&quot;headerlink&quot; title=&quot;静态注册&quot;&gt;&lt;/a&gt;静态注册&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;学习中有遇到问题，感谢Y-Z-F的热心帮助 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;广播的静态注册可以通过BroadcastReceiver和IntentFilter特性实现，也可以直接在AndroidManifest中增加&amp;lt; receiver &amp;gt;节点完成注册。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际测试中使用过android.intent.action.BATTERY_CHANGED和android.intent.action.CONFIGURATION_CHANGED来测试静态注册都无法监听到广播，查询发现有些系统广播不能静态注册，如：&lt;/p&gt;
&lt;p&gt;android.intent.action.SCREEN_ON&lt;/p&gt;
&lt;p&gt;android.intent.action.SCREEN_OFF&lt;/p&gt;
&lt;p&gt;android.intent.action.BATTERY_CHANGED&lt;/p&gt;
&lt;p&gt;android.intent.action.CONFIGURATION_CHANGED&lt;/p&gt;
&lt;p&gt;android.intent.action.TIME_TICK&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;p&gt;1、提高效率，这几个是Android的基本事件，太多程序监听会拖慢系统，所以Android不鼓励我们在后台监听这些事件。&lt;/p&gt;
&lt;p&gt;2、有序广播优先级问题，静态注册系统广播，系统的优先级大于应用的，系统监听过程中阻止了广播的向下传播。但是动态注册的优先级高于静态注册的优先级，故用动态注册代替静态注册。&lt;/p&gt;
&lt;p&gt;3、系统安全考虑&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;p&gt;使用动态注册，必须在Activity销毁时掉用UnregisterReceiver，随着Activity的销毁变不能再接收广播，可以通过启动一个Service，在Service内动态注册一个BroadcastReceiver.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;参考链接：&lt;a href=&quot;http://www.th7.cn/Program/Android/201404/190738.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.th7.cn/Program/Android/201404/190738.shtml&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过特性注册广播,这里注册的是飞行模式的改变：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[BroadcastReceiver]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[IntentFilter (new string[]&amp;#123; Intent.ActionAirplaneModeChanged &amp;#125;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class CustomBroadcastReceiver : BroadcastReceiver&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以在AndroidManifest中增加节点注册广播，如果不会写且一定要在AndroidManifest中注册可以先使用特性注册，编译项目，然后进入项目目录依次进入 obj-&amp;gt;debug-&amp;gt;android 找到XS为我们生成的AndroidManifest.xml文件并打开。找到receiver节点复制到项目中AndroidManifest.xml文件中application节点下面。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;receiver&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;md5c94a8952452462141c1443b48d775737.CustomBroadcastReceiver&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.action.AIRPLANE_MODE&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;receiver&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;android:name中包含的md5值是根据我们的项目报名生成的,这个值是必须的，如果想直接使用Android原生中省略包名的写法android:name=”.CustomBroadcastReceiver”。必须要对定义的广播接收器增加特性注册。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Register (&amp;quot;com.myue.broadcastreceiver（包名）.CustomBroadcastReceiver&amp;quot;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class CustomBroadcastReceiver : BroadcastReceiver&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;不要在广播里执行任何耗时操作,因为在广播中是不允许开辟线程的, 当OnReceiver()方法运行较长时&lt;br&gt;间(超过10秒)还没有结束的话,那么程序会报错(ANR), 广播更多的时候扮演的是一个打开其他组件的角&lt;br&gt;色,比如启动Service、Activity,Notification提示等！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;发送广播&quot;&gt;&lt;a href=&quot;#发送广播&quot; class=&quot;headerlink&quot; title=&quot;发送广播&quot;&gt;&lt;/a&gt;发送广播&lt;/h1&gt;&lt;p&gt;当我们想发送一个自己的广播时同样要先注册一个广播接收器，然后调用发送广播的方法SendBroadcast (intent)或者SendOrderedBroadcast(intent),两个方法代表前面提到过的两种广播类型。对于有序广播，我们可以通过IntentFilter设置优先级（priority，范围为－1000～1000之间），值越大优先级越高，优先级高的会先收到广播，并可以设置AbortBroadcast = false;截断广播的继续传递。&lt;/p&gt;
&lt;p&gt;定义广播接收器,接受的是我们自己发送的广播：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[BroadcastReceiver]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[IntentFilter (new string[]&amp;#123; &amp;quot;com.myue.custombroadcastreceiver&amp;quot; &amp;#125;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class CustomBroadcastReceiver : BroadcastReceiver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public override void OnReceive (Context context, Intent intent)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Toast.MakeText (context, &amp;quot;Received intent!&amp;quot;, ToastLength.Short).Show ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发送广播代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SendBroadcast (new Intent (&amp;quot;com.myue.custombroadcastreceiver&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;本文介绍的广播是全局广播，即我们发送的广播其它应用都会接收到，容易引发安全性问题。Android为我们提供了本地广播机制，该机制发送的广播只能在APP内接收到。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;BroadcastReceiver介绍&quot;&gt;&lt;a href=&quot;#BroadcastReceiver介绍&quot; class=&quot;headerlink&quot; title=&quot;BroadcastReceiver介绍&quot;&gt;&lt;/a&gt;BroadcastReceiver介绍&lt;/h1&gt;&lt;p&gt;BroadcastReceiver就是我们本文要介绍的主角广播接受者，Android四大基本组件之一。本质上是一种全局的监听器，监听系统全局的广播消息，可以接受来自系统和应用的广播。由于BroadcastReceiver是一个全局的监听器，因此可以将它作为不同应用程序间通信的一种手段。系统在特定情况下会发送广播，比如电量低或者充足，刚启动完，插入耳机，输入法改变等都会发送特定广播，这是系统广播，每个APP都会收到，当然我们也可以自己发广播，比如：接到服务端推送信息，用户在别处登录，发送广播强制用户下线回到 登陆界面，并提示在别处登录。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.xamarin.xyz/categories/Android/"/>
    
    
      <category term="BroadcastReceiver" scheme="http://www.xamarin.xyz/tags/BroadcastReceiver/"/>
    
  </entry>
  
  <entry>
    <title>Xamarin.Android Service详解</title>
    <link href="http://www.xamarin.xyz/2016/05/10/service3/"/>
    <id>http://www.xamarin.xyz/2016/05/10/service3/</id>
    <published>2016-05-09T17:09:07.000Z</published>
    <updated>2016-05-09T17:12:08.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Binder机制初涉&quot;&gt;&lt;a href=&quot;#Binder机制初涉&quot; class=&quot;headerlink&quot; title=&quot;Binder机制初涉&quot;&gt;&lt;/a&gt;Binder机制初涉&lt;/h1&gt;&lt;p&gt;IBinder是远程对象的基本接口，是一个轻量级远程调用机制的核心部分，不仅可以用于远程调用，也可用于进程内调用。该接口定义了与远程对象交互的协议，通常我们不会直接实现这个接口而是继承Binder。IBinder的主要API是transact()，与它对应另一方法是Binder.onTransact()。第一个方法使你可以向远端的IBinder对象发送发出调用，第二个方法使你自己的远程对象能够响应接收到的调用。IBinder的API都是同步执行的，比如transact()直到对方的Binder.onTransact()方法调用完成后才返回。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;通过transact()发送的数据是Parcel，Parcel是一种一般的缓冲区，除了有数据外还带有一些描述它内容的元数据。元数据用于管理IBinder对象的引用，这样就能在缓冲区从一个进程移动到另一个进程时保存这些引用。这样就保证了当一个IBinder被写入到Parcel并发送到另一个进程中，如果另一个进程把同一个IBinder的引用回发到原来的进程，那么这个原来的进程就能接收到发出的那个IBinder的引用。这种机制使IBinder和Binder像唯一标志符那样在进程间管理。&lt;/p&gt;
&lt;p&gt;Binder机制还支持进程间的递归调用。例如，进程Ａ执行自己的IBinder的transact()调用进程Ｂ 的Binder，而进程Ｂ在其Binder.onTransact()中又用transact()向进程Ａ发起调用，那么进程Ａ 在等待它发出的调用返回的同时，还会用Binder.onTransact()响应进程Ｂ的transact()。 总之Binder造成的结果就是让我们感觉到跨进程的调用与进程内的调用没什么区别。&lt;/p&gt;
&lt;p&gt;当操作远程对象时，你应该查看它们是否有效，有三种方法可以使用：&lt;/p&gt;
&lt;p&gt;１ transact()方法将在IBinder所在的进程不存在时抛出RemoteException异常。&lt;/p&gt;
&lt;p&gt;２ 如果目标进程不存在，那么调用pingBinder()时返回false。&lt;/p&gt;
&lt;p&gt;３ 可以用linkToDeath()方法向IBinder注册一个IBinder.DeathRecipient，在IBinder代表的进程退出时被调用。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;以上介绍摘自：&lt;a href=&quot;http://blog.csdn.net/niu_gao/article/details/6453218&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/niu_gao/article/details/6453218&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;AIDL使用详解&quot;&gt;&lt;a href=&quot;#AIDL使用详解&quot; class=&quot;headerlink&quot; title=&quot;AIDL使用详解&quot;&gt;&lt;/a&gt;AIDL使用详解&lt;/h1&gt;&lt;h2 id=&quot;AIDL介绍&quot;&gt;&lt;a href=&quot;#AIDL介绍&quot; class=&quot;headerlink&quot; title=&quot;AIDL介绍&quot;&gt;&lt;/a&gt;AIDL介绍&lt;/h2&gt;&lt;p&gt;前面我们介绍过Service➕Messager实现跨进程通信(interprocess communication)，即IPC。为了实现跨进程通信，Android为我们提供了Binder机制，而这种机制使用的接口语言就是：AIDL(Android Interface Definition Language)，AIDL并非真正的编程语言只是定义两个进程间的通信接口而已，Android SDK的 platform-tools目录下的aidl.exe工具会根据AIDL生成符合通信协议的接口代码。该接口内包含一个Stub的内部类，该类中实现了在该类中实现了IBinder接口与自定义的通信接口, 这个类将会作为远程Service的回调类——实现了IBinder接口,所以可作为Service的onBind( )方法的返回值！&lt;/p&gt;
&lt;p&gt;概念讲的可能有点模糊，下面简单的介绍一个使用Android系统服务的例子。&lt;/p&gt;
&lt;h2 id=&quot;使用系统提供的服务&quot;&gt;&lt;a href=&quot;#使用系统提供的服务&quot; class=&quot;headerlink&quot; title=&quot;使用系统提供的服务&quot;&gt;&lt;/a&gt;使用系统提供的服务&lt;/h2&gt;&lt;p&gt;这里介绍的是调用系统服务挂断电话的一个例子，需要说明的是这个Demo并没有达到我们预期的效果，挂断电话需要添加android.permission.MODIFY_PHONE_STATE权限（Permission is only granted to system apps ），由于我们不是系统应用无法使用这个权限，所以挂断电话仍然会抛出异常。在低版本的Android系统的中这个例子应该是没有问题，说明Android系统正越来越安全往一个好的方向发展。&lt;/p&gt;
&lt;p&gt;首先准备需要用到的接口描述语言，从服务端拷贝而来，这里不提供可自行Google或百度：&lt;br&gt;Bundle.aidl、ITelephony.aidl、NeighboringCellInfo.aidl&lt;br&gt;主要用到的是ITelephony，因为ITelephony.aidl中有引用另外两个文件所以也要复制到项目里。&lt;/p&gt;
&lt;p&gt;在项目中定义一个AIDL文件夹，不是必须的只是为了项目结构。将准备好的三个AIDL文件添加到AIDL文件夹中，选中全部AIDL文件，右键 ——&amp;gt; Build Action ——&amp;gt; AndroidInterfaceDescription.保存并编译项目，如果操作正确应该不会报错。&lt;/p&gt;
&lt;p&gt;现在打开项目目录，依次进入obj-&amp;gt;Debug/Release-&amp;gt;aidl 会发现已经为我们生成了三个cs文件对应三个AIDL文件。查看ITelephony.cs文件 可以看到里边包含一个ITelephonyStub内部类。这就是接下来我们要用到的，只是看一下，不需要什么操作，可以直接在项目内使用。&lt;/p&gt;
&lt;p&gt;引用using Com.Android.Internal.Telephony;&lt;/p&gt;
&lt;p&gt;下面给出项目部分代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class MyPhoneStateListener:PhoneStateListener&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public override void OnCallStateChanged (CallState state, string incomingNumber)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.Console.WriteLine (incomingNumber);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (incomingNumber.Equals (&amp;quot;110&amp;quot;) &amp;amp;&amp;amp; state == CallState.Ringing) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			//挂断电话&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var class_ref = JNIEnv.FindClass (&amp;quot;android/os/ServiceManager&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			//IBinder getService(String name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var method_id = JNIEnv.GetStaticMethodID (class_ref, &amp;quot;getService&amp;quot;, &amp;quot;(Ljava/lang/String;)Landroid/os/IBinder;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var binder = Java.Lang.Object.GetObject&amp;lt;IBinder&amp;gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					            JNIEnv.CallStaticObjectMethod (class_ref, method_id, new JValue (new Java.Lang.String (Activity.TelephonyService))),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					            JniHandleOwnership.TransferLocalRef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var telephony = ITelephonyStub.AsInterface (binder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			telephony.EndCall ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		base.OnCallStateChanged (state, incomingNumber);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;挂断电话具体代码介绍自行百度。&lt;br&gt;&lt;em&gt;Xamarin JNI相关操作请参考：&lt;a href=&quot;https://developer.xamarin.com/guides/android/advanced_topics/java_integration_overview/working_with_jni/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.xamarin.com/guides/android/advanced_topics/java_integration_overview/working_with_jni/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;自定义AIDL&quot;&gt;&lt;a href=&quot;#自定义AIDL&quot; class=&quot;headerlink&quot; title=&quot;自定义AIDL&quot;&gt;&lt;/a&gt;自定义AIDL&lt;/h2&gt;&lt;p&gt;AIDL注意事项（Java代码编写）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口名词需要与aidl文件名相同&lt;/li&gt;
&lt;li&gt;接口和方法前面不要加访问权限修饰符：public ,private,protected等，也不能用static final!&lt;/li&gt;
&lt;li&gt;AIDL默认支持的类型包括Java基本类型，String，List，Map，CharSequence，除此之外的其他类型都 需要import声明，对于使用自定义类型作为参数或者返回值，自定义类型需要实现Parcelable接口&lt;/li&gt;
&lt;li&gt;自定义类型和AIDL生成的其它接口类型在aidl描述文件中，应该显式import，即便在该类和定义 的包在同一个包中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;服务端&quot;&gt;&lt;a href=&quot;#服务端&quot; class=&quot;headerlink&quot; title=&quot;服务端&quot;&gt;&lt;/a&gt;服务端&lt;/h3&gt;&lt;p&gt;1.创建AIDL文件命名为IMyService.AIDL，XS无法直接创建AIDL文件，Visual Studio Code创建文件保存为AIDL添加到项目里即可：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.myue.service;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;interface IMyService&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//作为传入参数,接口中定义方法时,需要制定新参的传递模式,这里是传入,所以前面有一个in &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int Add(in int value1,in int value2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置Build Action，编译项目，会生成IMyService.cs文件，包含IMyService接口。&lt;/p&gt;
&lt;p&gt;2.自定义Binder类，继承IMyServiceStub和IMyService&lt;br&gt;注意添加using Com.Myue.Service;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class MyBinder: IMyServiceStub, IMyService&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public override int Add (int value1, int value2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.Console.WriteLine (&amp;quot;IMyService Add&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return value1 + value2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.自定义Service，注册为可隐式调用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[IntentFilter (new string[] &amp;#123; &amp;quot;com.myue.myservice&amp;quot; &amp;#125;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class MyService: Service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public override void OnCreate ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		base.OnCreate ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.Console.WriteLine (&amp;quot;MyService OnCreate&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public override IBinder OnBind (Intent intent)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return new MyBinder ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public override void OnDestroy ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		base.OnDestroy ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.Console.WriteLine (&amp;quot;MyService OnDestroy&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; class=&quot;headerlink&quot; title=&quot;客户端&quot;&gt;&lt;/a&gt;客户端&lt;/h3&gt;&lt;p&gt;要做的就是参看前面介绍的调用系统服务和使用Bound Service,编写相关代码。即复制服务端AIDL到客户端，并生成接口文件。&lt;br&gt;定义MyServiceConnection，通过IMyServiceStub.AsInterface获取服务代理。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class MyServiceConnection : Java.Lang.Object, IServiceConnection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public MyServiceConnection ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void OnServiceConnected (ComponentName name, IBinder service)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		IMyServiceStub.AsInterface(service);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void OnServiceDisconnected (ComponentName name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;font color=&quot;red&quot;&gt;自定义AIDL很少使用，以上部分没有编写Demo测试。如有问题请指出&lt;/font&gt;

&lt;blockquote&gt;
&lt;p&gt;前面提到过AIDL默认支持几种基本数据类型，传递复杂数据类型需要通过自定义实现Parcelable接口，&lt;br&gt;可参考&lt;a href=&quot;http://www.xamarin.xyz/2016/04/29/activity2/&quot;&gt;http://www.xamarin.xyz/2016/04/29/activity2/&lt;/a&gt; 中传递对象数据的介绍，这里不在&lt;br&gt;举例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;通过Binder的onTransact完成跨进程通信&quot;&gt;&lt;a href=&quot;#通过Binder的onTransact完成跨进程通信&quot; class=&quot;headerlink&quot; title=&quot;通过Binder的onTransact完成跨进程通信&quot;&gt;&lt;/a&gt;通过Binder的onTransact完成跨进程通信&lt;/h1&gt;&lt;p&gt;该部分同样为简单描述，没有编写实际Demo。&lt;/p&gt;
&lt;p&gt;服务端实现定义Binder需重写OnTransact方法。操作相关数据通过Parcel返回给客户端。&lt;/p&gt;
&lt;p&gt;客户端在IServiceConnection的OnServiceConnected方法内获取Binder,并调用service.Transact ()方法获取数据。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Binder机制初涉&quot;&gt;&lt;a href=&quot;#Binder机制初涉&quot; class=&quot;headerlink&quot; title=&quot;Binder机制初涉&quot;&gt;&lt;/a&gt;Binder机制初涉&lt;/h1&gt;&lt;p&gt;IBinder是远程对象的基本接口，是一个轻量级远程调用机制的核心部分，不仅可以用于远程调用，也可用于进程内调用。该接口定义了与远程对象交互的协议，通常我们不会直接实现这个接口而是继承Binder。IBinder的主要API是transact()，与它对应另一方法是Binder.onTransact()。第一个方法使你可以向远端的IBinder对象发送发出调用，第二个方法使你自己的远程对象能够响应接收到的调用。IBinder的API都是同步执行的，比如transact()直到对方的Binder.onTransact()方法调用完成后才返回。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.xamarin.xyz/categories/Android/"/>
    
    
      <category term="Service" scheme="http://www.xamarin.xyz/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>Xamarin.Android Service进阶教程</title>
    <link href="http://www.xamarin.xyz/2016/05/08/service2/"/>
    <id>http://www.xamarin.xyz/2016/05/08/service2/</id>
    <published>2016-05-08T03:51:31.000Z</published>
    <updated>2016-05-09T01:51:42.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;IntentService的使用&quot;&gt;&lt;a href=&quot;#IntentService的使用&quot; class=&quot;headerlink&quot; title=&quot;IntentService的使用&quot;&gt;&lt;/a&gt;IntentService的使用&lt;/h1&gt;&lt;p&gt;前面介绍Service时已经说过Service是运行在主线程中的，我们需要在一个单独的线程中处理耗时的操作，在Service中自定义线程无疑增加了我们的代码量且可能因为我们不适当的处理引起应用程序的ANR异常，Android为我们提供了IntentService来解决这个问题。IntentService继承与Service提送了一个线程来处理我们的耗时操作，且不需要我们控制、结束Service。多次启动IntentService，每个Service的操作会加入到一个工作队列依次执行.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;IntentService的使用与普通Service有些区别，就是在定义Service时，普通的Service必须重写OnBind方法，IntentService则要重写的是OnHandleIntent，在OnHandleIntent方法中编写我们耗时操作的代码。&lt;/p&gt;
&lt;h1 id=&quot;Bound-Service介绍&quot;&gt;&lt;a href=&quot;#Bound-Service介绍&quot; class=&quot;headerlink&quot; title=&quot;Bound Service介绍&quot;&gt;&lt;/a&gt;Bound Service介绍&lt;/h1&gt;&lt;p&gt;上一篇文章介绍了Service的两种生命周期和常见的使用形势，现在对Bound Service简单的介绍一下。通过bindService方法启动Service主要是为了实现应用应用程序的通信，可以是应用内的也可以是不同应用之间的通信。&lt;/p&gt;
&lt;h2 id=&quot;Service相同进程内通信&quot;&gt;&lt;a href=&quot;#Service相同进程内通信&quot; class=&quot;headerlink&quot; title=&quot;Service相同进程内通信&quot;&gt;&lt;/a&gt;Service相同进程内通信&lt;/h2&gt;&lt;p&gt;通过一个简单的例子介绍如何使用bindService方式启动服务。&lt;/p&gt;
&lt;p&gt;自定义Binder子类，实现自己的逻辑代码，作为Service中OnBind的返回。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class MyBinder:Binder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void Say ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.Console.WriteLine (&amp;quot;Say What!!!&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现Service代码,在重写的OnBind方法中返回定义的Binder对象实例。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class MyService:Service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#region implemented abstract members of Service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public override IBinder OnBind (Intent intent)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return new MyBinder ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#endregion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时我门可以尝试调用BindService以绑定启动我们的服务，会发现我们的工作并没有完成，还需要定义一个实现了IServiceConnection接口的类，这个类将作为Service与Activity之通信的桥梁。IServiceConnection接口有两个方法OnServiceConnected和OnServiceDisconnected，如果链接成功回调OnServiceConnected方法，如果异常终止或者其它原因导致Service连接断开则回调OnServiceDisconnected方法，调用UnBindService断开Service不会回调该方法。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class MyServiceConnection:Java.Lang.Object,IServiceConnection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void OnServiceConnected (ComponentName name, IBinder service)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.Console.WriteLine (&amp;quot;OnServiceConnected&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		var binder = service as MyBinder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		binder.Say ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void OnServiceDisconnected (ComponentName name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.Console.WriteLine (&amp;quot;OnServiceDisconnected&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时就可以调用如下代码启动并绑定Service,第三个参数为Flag标识。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent (this, typeof(MyService));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BindService (intent, new MyServiceConnection (), Bind.AutoCreate);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当Service不在需要时应调用UnbindService方法停止服务。该方法传入一个IServiceConnection的对象，这个对象应与启动时传入的对象是同一个对象，否为会抛出Java.Lang.IllegalArgumentException Service not registered 异常&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UnbindService (serviceConnection);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至此实现一个简单的Bound Service例子结束。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有些情况下为了防止重复绑定服务应该有如下修改：&lt;/p&gt;
&lt;p&gt;The BindService method should be called from the ApplicationContext rather than from the Activity.&lt;/p&gt;
&lt;p&gt; The SerivceConnection instance should be returned from OnRetainNonConfigurationInstance .&lt;/p&gt;
&lt;p&gt;The OnRetainNonConfigurationInstance method should set a flag that will only be used to unbind the service when the service is not stopped due to a configuration change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Service不同进程内通信&quot;&gt;&lt;a href=&quot;#Service不同进程内通信&quot; class=&quot;headerlink&quot; title=&quot;Service不同进程内通信&quot;&gt;&lt;/a&gt;Service不同进程内通信&lt;/h2&gt;&lt;p&gt;这几简单的介绍Service➕Messenger实现不同进程间通信 inter-process communication (IPC) ,Android Interface Definition Language (AIDL)下一片文章中介绍。&lt;/p&gt;
&lt;p&gt;服务端Service做如下修改,注册Service支持隐式启动并返回Messenger提供的Binder：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[IntentFilter(new String[]&amp;#123;&amp;quot;com.xamarin.MyService&amp;quot;&amp;#125;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class MyService:Service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Messenger messenger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public MyService ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		messenger = new Messenger (new handler ());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public override IBinder OnBind (Intent intent)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return messenger.Binder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	class handler : Handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public override void HandleMessage (Message msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			//获取客户端message中的Messenger，用于回调&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			msg.ReplyTo.Send (Message.Obtain());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;客户端绑定Service也要做相应调整：&lt;/p&gt;
&lt;p&gt;定义Intent &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;new Intent (&amp;quot;com.xamarin.MyService&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实现IServiceConnection的OnServiceConnected方法内通过new Messenger (service)获得Messenger发送消息。&lt;/p&gt;
&lt;p&gt;这里涉及到Message的使用，先不做过多介绍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后续补充，Android 5.0之后会抛出 Service Intent must be explicit: Intent，对应解决办法同时设置Intent的Action和PackageName即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;具体使用可参考&lt;a href=&quot;http://my.oschina.net/u/262208/blog/378249&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://my.oschina.net/u/262208/blog/378249&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;关于Xamarin.Android Service完整使用请参考：&lt;br&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/android/application_fundamentals/services/part_3_-_viewing_running_services_and_stock_service_example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.xamarin.com/guides/android/application_fundamentals/services/part_3_-_viewing_running_services_and_stock_service_example&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IntentService的使用&quot;&gt;&lt;a href=&quot;#IntentService的使用&quot; class=&quot;headerlink&quot; title=&quot;IntentService的使用&quot;&gt;&lt;/a&gt;IntentService的使用&lt;/h1&gt;&lt;p&gt;前面介绍Service时已经说过Service是运行在主线程中的，我们需要在一个单独的线程中处理耗时的操作，在Service中自定义线程无疑增加了我们的代码量且可能因为我们不适当的处理引起应用程序的ANR异常，Android为我们提供了IntentService来解决这个问题。IntentService继承与Service提送了一个线程来处理我们的耗时操作，且不需要我们控制、结束Service。多次启动IntentService，每个Service的操作会加入到一个工作队列依次执行.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.xamarin.xyz/categories/Android/"/>
    
    
      <category term="Service" scheme="http://www.xamarin.xyz/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>Xamarin.Android Service入门介绍</title>
    <link href="http://www.xamarin.xyz/2016/05/06/service1/"/>
    <id>http://www.xamarin.xyz/2016/05/06/service1/</id>
    <published>2016-05-06T00:37:27.000Z</published>
    <updated>2016-05-06T01:02:10.000Z</updated>
    
    <content type="html">&lt;p&gt;Service作为Android四大组件之一,它主要用于在后台处理一些耗时的逻辑，没有UI界面，我们可以在程序退出的情况下，让Service在后台继续保持运行状态。注意Service不是Thread。Android的服务可以分为本地服务（主进程）和远程服务（Remote，独立的进程），本地服务是处理我们自己应用程序的逻辑，远程服务是提供系统服务的Service（AIDL的使用）。本文着重介绍本地服务。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Service的生命周介绍&quot;&gt;&lt;a href=&quot;#Service的生命周介绍&quot; class=&quot;headerlink&quot; title=&quot;Service的生命周介绍&quot;&gt;&lt;/a&gt;Service的生命周介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://www.runoob.com/wp-content/uploads/2015/08/11165797.jpg&quot; alt=&quot;Service 生命周期&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以上的生命周期图表示Service两种使用方式：StartService和BindService。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;生命周期解析：&lt;/p&gt;
&lt;h2 id=&quot;StartService启动Service&quot;&gt;&lt;a href=&quot;#StartService启动Service&quot; class=&quot;headerlink&quot; title=&quot;StartService启动Service&quot;&gt;&lt;/a&gt;StartService启动Service&lt;/h2&gt;&lt;p&gt;首次创建Service实例会回调onCreate方法，该方法在Service的整个生命周期只会调用一次。当我们调用StartService启动Service时会回调onStartCommand方法，此时Service处于运行状态。直到Service被自己或它的调用者停止（stopService），回调进入onDestory方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同一个Service无论我们启动多少次，调用一次StopService即可停掉Service，因为没次启动Service会重复调用已经存在的Service对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;onStartCommand方法返回值介绍：返回类型为StartCommandResult，当系统可用内存过低时，Android可能会停止任何服务，如果我们的服务被停止，该如何重新启动就会根据onStartCommand返回值做出处理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sticky  重新启动服务并传入一个空的Intent，如检测更新的服务&lt;/li&gt;
&lt;li&gt;RedeliverIntent  重新启动服务，并传入服务停止前最后传入的Intent重新传入，如下载服务&lt;/li&gt;
&lt;li&gt;NotSticky  服务不会重新启动&lt;/li&gt;
&lt;li&gt;StickyCompatibility  Sticky的兼容版本，但不保证服务被kill后一定能重启。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;BindService启动Service&quot;&gt;&lt;a href=&quot;#BindService启动Service&quot; class=&quot;headerlink&quot; title=&quot;BindService启动Service&quot;&gt;&lt;/a&gt;BindService启动Service&lt;/h2&gt;&lt;p&gt;Service第一次创建进入onCreate方法，当我们调用BindService方法绑定一个Service时会调用onBind方法。onBind返回一个IBinder对象，调用者可以通过IBinder与Service进行交互。如果再次使用bindService绑定Service,系统不会创建新的Sevice实例,也不会再调用onBind方法,而是直接把IBinder对象传递给其他后来增加的客户端!如果我们想解除与服务的绑定，调用unbindService方法即可，此时onUnbind方法将会被调用。如果Service只绑定了一个客户端，Service回调onDestory方法销毁Service，否则只有所有的客户端与Service解除绑定后，系统才会销毁这个Service。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我们使用bindService来绑定一个已经启动的Service,是已经启动的Service!!! 系统只是将Service的内部IBinder对象传递给Activity,并不会将Service的生命周期 与Activity绑定,因此调用unBindService( )方法取消绑定时,Service也不会被销毁！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Service-（StartService）使用示例&quot;&gt;&lt;a href=&quot;#Service-（StartService）使用示例&quot; class=&quot;headerlink&quot; title=&quot;Service （StartService）使用示例&quot;&gt;&lt;/a&gt;Service （StartService）使用示例&lt;/h1&gt;&lt;p&gt;创建服务&lt;/p&gt;
&lt;p&gt;继承Service，重写生命周期方法，定义好自己的Service后在AndroidManifest.xml中进行注册，Xamarin.Android 中推荐使用ServiceAttribute完成注册工作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个继承Service且有ServiceAttribute修饰的类 &lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; [Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; public class DemoService : Service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在AndroidManifest.xml生成的service节点如下&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;demoservice.DemoService&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;service&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;启动服务&lt;/p&gt;
&lt;p&gt;StartService (new Intent (this, typeof(DemoService)));&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要说明的是启动的服务是运行与主线程中的（the service will run on the main thread），&lt;br&gt;服务要处理耗时的操作应该结合如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Thread t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread (() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;        &lt;span class=&quot;comment&quot;&gt;// long running code ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; t.Start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;停止服务&lt;/p&gt;
&lt;p&gt;StopService (new Intent (this, typeof(DemoService)));&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当我们多次启动一个服务时，直接调用StopService或者StopSelf是不合理的，应该调用StopSelf (startId:)来停止服务。startId是OnStartCommand方法传入的一个参数，表示服务启动的次数。StopSelf (startId:)中的startId与启动服务时系统生成的startId相同时，才会停止服务，从而确保服务不会过早的被停止。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Service隐式启动（Starting-a-Service-With-an-Intent-Filter）&quot;&gt;&lt;a href=&quot;#Service隐式启动（Starting-a-Service-With-an-Intent-Filter）&quot; class=&quot;headerlink&quot; title=&quot;Service隐式启动（Starting a Service With an Intent Filter）&quot;&gt;&lt;/a&gt;Service隐式启动（Starting a Service With an Intent Filter）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;和启动Activity一样，我们也可以借助IntentFilter实现Service的隐式启动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果是操作AndroidManifest.xml，在service节点下怎加一个 &lt;intent-filter&gt; 节点。&lt;/intent-filter&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;demoservice.DemoService&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.xamarin.DemoService&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;service&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Xamarin.Android中可以通过IntentFilterAttribute实现同样的效果&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[IntentFilter(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[]&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;com.xamarin.DemoService&quot;&lt;/span&gt;&amp;#125;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DemoService&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样启动和停止服务使用如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;StartService (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent (&lt;span class=&quot;string&quot;&gt;&quot;com.xamarin.DemoService&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StopService (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent (&lt;span class=&quot;string&quot;&gt;&quot;com.xamarin.DemoService&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Service与用户交互&quot;&gt;&lt;a href=&quot;#Service与用户交互&quot; class=&quot;headerlink&quot; title=&quot;Service与用户交互&quot;&gt;&lt;/a&gt;Service与用户交互&lt;/h1&gt;&lt;p&gt;服务长时间运行于后台，可能会与用户进行交互将一些信息反馈给用户，如文件传输等。&lt;/p&gt;
&lt;h2 id=&quot;发送通知&quot;&gt;&lt;a href=&quot;#发送通知&quot; class=&quot;headerlink&quot; title=&quot;发送通知&quot;&gt;&lt;/a&gt;发送通知&lt;/h2&gt;&lt;p&gt;发送通知代码：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nMgr = (NotificationManager)GetSystemService (NotificationService);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; notification = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Notification (Resource.Mipmap.Icon, &lt;span class=&quot;string&quot;&gt;&quot;Message from demo service&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pendingIntent = PendingIntent.GetActivity (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(MainActivity)), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;notification.SetLatestEventInfo (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Demo Service Notification&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Message from demo service&quot;&lt;/span&gt;, pendingIntent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nMgr.Notify (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, notification);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;PendingIntent以后在介绍，以上代码点击通知会启动PendingIntent所包含的Activity。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Toast提示&quot;&gt;&lt;a href=&quot;#Toast提示&quot; class=&quot;headerlink&quot; title=&quot;Toast提示&quot;&gt;&lt;/a&gt;Toast提示&lt;/h2&gt;&lt;p&gt;Service中使用吐司通知（可以理解为更新UI），由于Service是运行在主线程中，所以可以直接调用如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Toast.MakeText (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;The demo service has started&quot;&lt;/span&gt;, ToastLength.Long).Show();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们服务要处理耗时操作时，应创建一个子线程，如何在Service的字线程中更新UI？不同于Activity，Service并没有为我们提供RunOnUIThread用来在子线程中更新UI，Service中可以使用Handle来完成。&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myHandler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Handler ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myHandler.Post(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Toast.MakeText (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Message from demo service&quot;&lt;/span&gt;, ToastLength.Long).Show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;In addition to a Handler, other options that may be used include Android.App.Application.SynchronizationContext.Post() and System.Threading.SynchronizationContext.Current.Post().&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前台服务&quot;&gt;&lt;a href=&quot;#前台服务&quot; class=&quot;headerlink&quot; title=&quot;前台服务&quot;&gt;&lt;/a&gt;前台服务&lt;/h1&gt;&lt;p&gt;前台服务（Foreground Services）不同于普通Service的是，当系统内存过低时，前台服务不会被停止(并不能保证Service 永远不被杀掉，只是提高了他的优先级)，但是使用前台服务时要包含一个Notification，以提醒用户服务运行状态,如音乐播放器。如下代码可以创建一个前台服务：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ongoing = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Notification (Resource.Mipmap.Icon, &lt;span class=&quot;string&quot;&gt;&quot;DemoService in foreground&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pendingIntent = PendingIntent.GetActivity (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(MainActivity)), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ongoing.SetLatestEventInfo (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;DemoService&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;DemoService is running in the foreground&quot;&lt;/span&gt;, pendingIntent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartForeground ((&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)NotificationFlags.ForegroundService, ongoing);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码是写在Service内的，设置一个服务为前台服务，当我们想要停止前台服务调用StopForeground，传入一个bool类型参数，标示是否删除关联的通知。需要说明的是当我们调用StopForeground时，服务并没有被停止，只是该服务不再是前台服务。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Service作为Android四大组件之一,它主要用于在后台处理一些耗时的逻辑，没有UI界面，我们可以在程序退出的情况下，让Service在后台继续保持运行状态。注意Service不是Thread。Android的服务可以分为本地服务（主进程）和远程服务（Remote，独立的进程），本地服务是处理我们自己应用程序的逻辑，远程服务是提供系统服务的Service（AIDL的使用）。本文着重介绍本地服务。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.xamarin.xyz/categories/Android/"/>
    
    
      <category term="Service" scheme="http://www.xamarin.xyz/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>Android Activity管理机制详解</title>
    <link href="http://www.xamarin.xyz/2016/05/02/activity3/"/>
    <id>http://www.xamarin.xyz/2016/05/02/activity3/</id>
    <published>2016-05-02T08:12:50.000Z</published>
    <updated>2016-05-02T15:29:13.000Z</updated>
    
    <content type="html">&lt;p&gt;实际开发中，我们的App是由多个Activity构成的，为了能够管理Activity，Android为我们提供了Task的概念，默认情况下一个应用的所有Activity是管理在一个Task中的。Task是一种Stack类型的数据结构，启动App会创建一个Task，Activity特性设置MainLauncher = true或者AndroidManifest中配置了Main和Launcher的Activity会被压入栈中，新启动的Activity会执行入栈操作，关闭的Activity执行出栈操作。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;官方文档给出的一个流程图：&lt;br&gt;&lt;img src=&quot;http://www.runoob.com/wp-content/uploads/2015/08/93537362.jpg&quot; alt=&quot;Back Stack&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Activity启动模式&quot;&gt;&lt;a href=&quot;#Activity启动模式&quot; class=&quot;headerlink&quot; title=&quot;Activity启动模式&quot;&gt;&lt;/a&gt;Activity启动模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Activity的启动模式（launchMode）也是Task管理的一部分，这里单独拿出来介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Activity总共有四种启动模式：standard(multiple)(默认)，singleTop，singleTask，singleInstance。合理的使用启动模式可以带给用户更好的使用体验。&lt;/p&gt;
&lt;h2 id=&quot;设置Activity的启动模式&quot;&gt;&lt;a href=&quot;#设置Activity的启动模式&quot; class=&quot;headerlink&quot; title=&quot;设置Activity的启动模式&quot;&gt;&lt;/a&gt;设置Activity的启动模式&lt;/h2&gt;&lt;p&gt;在AndroidManifest.xml &lt;activity&gt;标签的一个属性中设置launchMode，如下：&lt;/activity&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;android:label&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;singleTask launchMode&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;android:launchMode&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;singleTask&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在Xamarin.Android开发过程中，我们不会过多的操作AndroidManifest.xml文件，设置启动模式通过设置Activity特定的值实现，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Activity (Label = &amp;quot;Activity2&amp;quot;,LaunchMode=Android.Content.PM.LaunchMode.SingleTop)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以通过启动Activity时，为Intent设置flag实现：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;intent.AddFlags(ActivityFlags.SingleTop);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;启动模式介绍&quot;&gt;&lt;a href=&quot;#启动模式介绍&quot; class=&quot;headerlink&quot; title=&quot;启动模式介绍&quot;&gt;&lt;/a&gt;启动模式介绍&lt;/h2&gt;&lt;p&gt;先看一下各个启动模式的总结介绍：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MyueX/MyueX.github.io/master/attach/activity/launchMode.png&quot; alt=&quot;launchMode&quot;&gt;&lt;/p&gt;
&lt;p&gt;启动模式详解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;standard模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标准启动模式.在这种模式下启动的Activity可以被多次实例化.如果Activity A的启动模式为standard，并且A已经启动，在A中再次启动Activity A，会在A的上面再次启动一个A的实例，即当前的桟中的状态为A–&amp;gt;A。&lt;br&gt;&lt;img src=&quot;http://www.jcodecraeer.com/uploads/20150520/1432087372621766.jpg&quot; alt=&quot;standard模式&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;singleTop模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个以singleTop模式启动的Activity的实例已经存在于栈顶,当我们再次启动这个Activity时，不会重新创建而是调用onNewIntent方法，重用栈顶的实例。如果A的启动模式为singleTop，并且A的一个实例已经存在于栈顶中， 启动A Activity不会再次创建A的实例，而是调用原来实例的onNewIntent方法，重用原来的实例，保证栈顶只有一个A的实例。 这时任务栈中还是只有一个A的实例。如果A Activity的一个实例已经存在与任务栈中，但是不在栈顶，那么它和standard模式相同，也会创建多个实例。&lt;br&gt;&lt;img src=&quot;http://www.jcodecraeer.com/uploads/20150520/1432087389219419.jpg&quot; alt=&quot;singleTop模式&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;singleTask模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A Activity的启动模式设置为singleTask，启动Activity A时，检测当前Task是否有A的实例，没有则创建A的实例压入栈中，如果已经有了A的实例，则调用onNewIntent方法重用该实例，其如果A实例不位于栈顶，则将A之上的Activity对象出栈使A的实例位于栈顶。&lt;br&gt;&lt;img src=&quot;http://www.jcodecraeer.com/uploads/20150520/1432087394416117.jpg&quot; alt=&quot;singleTask模式&quot;&gt;&lt;/p&gt;
&lt;p&gt;尝试设置taskAffinity（后面介绍）的值，出现如图效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MyueX/MyueX.github.io/master/attach/activity/taskAffinity.gif&quot; alt=&quot;taskAffinity&quot;&gt;&lt;/p&gt;
&lt;p&gt;设置taskAffinity项目运行失败，提示Deployment failed. Internal error.修改taskAffinity为如下形式才可运行：TaskAffinity = “aaa.bbbb”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;singleTop模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论从哪个Task启动Activity都只会创建一个Activity实例,并将它加入新的Task栈,当再次启动该activity的实例时，会重用已存在的任务和实例&lt;br&gt;&lt;img src=&quot;http://www.jcodecraeer.com/uploads/20150520/1432087655129646.jpg&quot; alt=&quot;singleTop模式&quot;&gt;&lt;/p&gt;
&lt;p&gt;测试singleTop运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MyueX/MyueX.github.io/master/attach/activity/singInstance.gif&quot; alt=&quot;singleTop&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过title区分Activity，可以看到以singleTop模式启动Acvity2当我们按下Home键，重新点击图标启动应用，应用重新启动Activity1，第二种情况我们在任务列表返回应用，返回Activity2，按下Back并没有返回Activity1，而是直接退出应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Task的管理&quot;&gt;&lt;a href=&quot;#Task的管理&quot; class=&quot;headerlink&quot; title=&quot;Task的管理&quot;&gt;&lt;/a&gt;Task的管理&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;查看Activity的堆栈信息  adb shell dumpsys activity&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;activity中&gt;我们可以使用的Task管理相关的属性如下：&lt;/activity中&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;taskAffinity&lt;/li&gt;
&lt;li&gt;launchMode&lt;/li&gt;
&lt;li&gt;llowTaskReparenting&lt;/li&gt;
&lt;li&gt;clearTaskOnLaunch&lt;/li&gt;
&lt;li&gt;alwaysRetainTaskState&lt;/li&gt;
&lt;li&gt;finishOnTaskLaunch&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;taskAffinity介绍&quot;&gt;&lt;a href=&quot;#taskAffinity介绍&quot; class=&quot;headerlink&quot; title=&quot;taskAffinity介绍&quot;&gt;&lt;/a&gt;taskAffinity介绍&lt;/h2&gt;&lt;p&gt;通常一个应用中所有的Activity有相同的affinity，即拥有相同taskAffinity值的Activity值属于同一个Task。 不同应用程序中的Activity可以拥有相同的Affinity，同一个应用程序中不同Activity 也可以设置成不同的Affinity。taskAffinity的使用会有下面两种情况：&lt;/p&gt;
&lt;p&gt;1）当传递给StartActivity()的Intent对象包含 FLAG_ACTIVITY_NEW_TASK标记时，系统会为需要启动的Activity寻找与当前Activity不同Task。如果要启动的 Activity的Affinity属性与当前所有的Task的Affinity属性都不相同，系统会新建一个带那个Affinity属性的Task，并将要启动的Activity压到新建的Task栈中；否则将Activity压入那个Affinity属性相同的栈中。&lt;/p&gt;
&lt;p&gt;2）allowTaskReparenting属性设置为true 如果一个activity的allowTaskReparenting属性为true， 那么它可以从一个Task移到另外一个有相同Affinity的Task中，更换从属的Task。 如果一个.apk文件从用户角度来看包含了多个”应用程序”，你可能需要对那些 Activity赋不同的Affinity值。&lt;/p&gt;
&lt;h2 id=&quot;栈的管理&quot;&gt;&lt;a href=&quot;#栈的管理&quot; class=&quot;headerlink&quot; title=&quot;栈的管理&quot;&gt;&lt;/a&gt;栈的管理&lt;/h2&gt;&lt;p&gt;当应用长时间置于后台，系统可能会清理应用Task栈中的Activity，当用户返回应用保留的只有应用的启动Activity。通过以下设置改变这种行为！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alwaysRetainTaskState： 如果栈底Activity的这个属性被设置为true，Task中的所有activity将被长时间保存。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;clearTaskOnLaunch:如果栈底activity的这个属性被设置为true，一旦用户离开Task， 则 Task栈中的Activity将被清空到只剩下栈底activity。这种情况刚好与 alwaysRetainTaskState相反。即使用户只是短暂地离开，task也会返回到初始状态 （只剩下栈底acitivty）。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;finishOnTaskLaunch:与clearTaskOnLaunch相似，但它只对单独的activity起作用，而不是整个Task。它可以结束任何Activity，包括栈底的Activity。 当它设置为true时，当前的Activity只在当前会话期间作为Task的一部分存在， 当用户按下Home键重新点击图标启动应用，它将不存在。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;实际开发中，我们的App是由多个Activity构成的，为了能够管理Activity，Android为我们提供了Task的概念，默认情况下一个应用的所有Activity是管理在一个Task中的。Task是一种Stack类型的数据结构，启动App会创建一个Task，Activity特性设置MainLauncher = true或者AndroidManifest中配置了Main和Launcher的Activity会被压入栈中，新启动的Activity会执行入栈操作，关闭的Activity执行出栈操作。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.xamarin.xyz/categories/Android/"/>
    
    
      <category term="Activity" scheme="http://www.xamarin.xyz/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>Xamarin.Android Activity用例介绍</title>
    <link href="http://www.xamarin.xyz/2016/04/29/activity2/"/>
    <id>http://www.xamarin.xyz/2016/04/29/activity2/</id>
    <published>2016-04-29T07:08:21.000Z</published>
    <updated>2016-05-02T02:59:15.000Z</updated>
    
    <content type="html">&lt;p&gt;#Activity间传递数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Activity间传递数据是借助Intent（内部为Bundle）实现的&lt;/p&gt;
&lt;p&gt;在使用Bundle传递数据时，要注意，Bundle的大小是有限制的小于0.5MB，如果大于这个值 是会报TransactionTooLargeException异常的！！！（未验证）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Activiy数据单向传递&quot;&gt;&lt;a href=&quot;#Activiy数据单向传递&quot; class=&quot;headerlink&quot; title=&quot;Activiy数据单向传递&quot;&gt;&lt;/a&gt;Activiy数据单向传递&lt;/h2&gt;&lt;h3 id=&quot;简单数据传递&quot;&gt;&lt;a href=&quot;#简单数据传递&quot; class=&quot;headerlink&quot; title=&quot;简单数据传递&quot;&gt;&lt;/a&gt;简单数据传递&lt;/h3&gt;&lt;p&gt;Activity1传递数据代码：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (Activity2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra (&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Activity2接受数据代码：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = Intent.GetStringExtra (&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;传递对象数据&quot;&gt;&lt;a href=&quot;#传递对象数据&quot; class=&quot;headerlink&quot; title=&quot;传递对象数据&quot;&gt;&lt;/a&gt;传递对象数据&lt;/h3&gt;&lt;p&gt;使用Intent传递对象，该对象必须是可被序列化的对象。序列化对象有两种方式：Java.IO.ISerializable和android.os.Parcelable，从命名空间可以看出Serializable是Java提供的，而Parcelable是Google在Android中为我们定义的。在内存使用方面Parcelable比Serializable性能高，而Serializable可将数据持久化方便保存，所以在需要保存或网络传输数据时选择Serializable。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0204/2410.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android系统中Parcelable和Serializable的区别&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Serializable方式&quot;&gt;&lt;a href=&quot;#Serializable方式&quot; class=&quot;headerlink&quot; title=&quot;Serializable方式&quot;&gt;&lt;/a&gt;Serializable方式&lt;/h4&gt;&lt;p&gt;定义传递的对象，注意代码中的注释&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TestModel : Java.Lang.Object, ISerializable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//这里不确定这么定义是否有效 参考下面两个链接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//https://developer.xamarin.com/api/field/Java.Security.Key.SerialVersionUID/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//http://blog.csdn.net/hackingwu/article/details/26148543&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public const System.Int64 SerialVersionUID = 6603384152749567611;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//必须实现该构造函数 否则抛异常 No constructor found for .ctor(System.IntPtr, Android.Runtime.JniHandleOwnership)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public TestModel (IntPtr handle, JniHandleOwnership transfer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			: base (handle, transfer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public TestModel ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public string Name &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			get;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			set;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//必须的 否则获取到的对象都为默认值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//https://developer.xamarin.com/api/type/Java.IO.ISerializable/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[Export (&quot;readObject&quot;, Throws = new [] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			typeof(Java.IO.IOException),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			typeof(Java.Lang.ClassNotFoundException)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private void ReadObject (ObjectInputStream source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Name = source.ReadUTF ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[Export (&quot;writeObject&quot;, Throws = new [] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			typeof(Java.IO.IOException),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			typeof(Java.Lang.ClassNotFoundException)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private void WriteObject (ObjectOutputStream destination)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			destination.WriteUTF (Name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;传递数据代码：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(Activity2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	intent.PutExtra (&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TestModel () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Name = &lt;span class=&quot;string&quot;&gt;&quot;TestName&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接收数据代码：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; model = Intent.GetSerializableExtra (&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; TestModel;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Parcelable方式&quot;&gt;&lt;a href=&quot;#Parcelable方式&quot; class=&quot;headerlink&quot; title=&quot;Parcelable方式&quot;&gt;&lt;/a&gt;Parcelable方式&lt;/h4&gt;&lt;p&gt;Xamarin 官方文档有这样一段说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interface for classes whose instances can be written to and restored from a Parcel. Classes implementing the Parcelable interface must also have a non-null static field called CREATOR of a type that implements the IParcelableCreator interface.&lt;br&gt;不光要实现IParcelable接口的方法还要定义一个实现了IParcelableCreator接口的静态字段。&lt;br&gt;首先看一下传递对象的定义：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TestModel : Java.Lang.Object,IParcelable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public string Name &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			get;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			set;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//内容接口描述，默认返回0就可以;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public int DescribeContents ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//将传递的数据打包到Parcel容器中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void WriteToParcel (Parcel dest, ParcelableWriteFlags flags)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dest.WriteString (Name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[ExportField (&quot;CREATOR&quot;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public static ParcelableCreator InitializeCreator ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return new ParcelableCreator ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public class ParcelableCreator : Java.Lang.Object, IParcelableCreator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			public Java.Lang.Object CreateFromParcel (Parcel source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				return new TestModel () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Name = source.ReadString ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			public Java.Lang.Object[] NewArray (int size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				return new Java.Lang.Object [size];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;传递数据代码相同，改变传入的对象即可。&lt;/p&gt;
&lt;p&gt;获取数据代码用GetParcelableExtra方法代替GetSerializableExtra&lt;/p&gt;
&lt;h2 id=&quot;Activity之间数据回传&quot;&gt;&lt;a href=&quot;#Activity之间数据回传&quot; class=&quot;headerlink&quot; title=&quot;Activity之间数据回传&quot;&gt;&lt;/a&gt;Activity之间数据回传&lt;/h2&gt;&lt;p&gt;1、用StartActivityForResult代替StartActivity启动Activity。&lt;/p&gt;
&lt;p&gt;2、在启动的Activity中重写OnActivityResult方法&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OnActivityResult&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; requestCode, Result resultCode, Intent data&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;base&lt;/span&gt;.OnActivityResult (requestCode, resultCode, data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;requestCode用来区分由Activity的启动方式，如两个按钮起动Activity并传递不同的数据，在OnActivityResult方法中我们可以通过比较requestCode来区分由哪个按钮起动的Activty返回的数据。&lt;/p&gt;
&lt;p&gt;3、在被启动的Activty返回到启动的Activity之前调用SetResult方法指定resultCode和返回的数据。&lt;/p&gt;
&lt;h1 id=&quot;双击退出程序&quot;&gt;&lt;a href=&quot;#双击退出程序&quot; class=&quot;headerlink&quot; title=&quot;双击退出程序&quot;&gt;&lt;/a&gt;双击退出程序&lt;/h1&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义变量保存点击的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; exitTime = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OnKeyDown&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;Android.Views.Keycode keyCode, Android.Views.KeyEvent e&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//可以C#中(System.DateTime.Now - System.DateTime.Parse (&quot;1970-1-1&quot;)).TotalMilliseconds 代替JavaSystem.CurrentTimeMillis ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (keyCode == Android.Views.Keycode.Back) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((JavaSystem.CurrentTimeMillis () - exitTime) &amp;gt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Toast.MakeText (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;再按一次退出应用程序&quot;&lt;/span&gt;, ToastLength.Short).Show ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				exitTime = JavaSystem.CurrentTimeMillis ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;//Exit ();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;base&lt;/span&gt;.OnKeyDown (keyCode, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;为Activity设置过场动画&quot;&gt;&lt;a href=&quot;#为Activity设置过场动画&quot; class=&quot;headerlink&quot; title=&quot;为Activity设置过场动画&quot;&gt;&lt;/a&gt;为Activity设置过场动画&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在Activity切换时我们可以加上各种跳转动画，如淡入淡出，放大缩小，左右互推等！这里简单介绍如何设置Activity跳转的动画。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;准备工作：在Resources目录下创建anim目录，并在anim目录下定义动画效果（先不做介绍）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/MyueX/MyueX.github.io/blob/master/attach/Activity%E5%B8%B8%E7%94%A8%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB.zip?raw=true&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity常用过度动画&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码设置&quot;&gt;&lt;a href=&quot;#代码设置&quot; class=&quot;headerlink&quot; title=&quot;代码设置&quot;&gt;&lt;/a&gt;代码设置&lt;/h2&gt;&lt;p&gt;在StartActivity或Finish后面加上OverridePendingTransition(enterAnim,exitAnim);&lt;br&gt;enterAnim:进入Activity的动画&lt;br&gt;exitAnim:退出Activity的动画&lt;/p&gt;
&lt;h2 id=&quot;style设置&quot;&gt;&lt;a href=&quot;#style设置&quot; class=&quot;headerlink&quot; title=&quot;style设置&quot;&gt;&lt;/a&gt;style设置&lt;/h2&gt;&lt;p&gt;通过style进行配置是全局的，所有的Activity都会加载这个动画&lt;/p&gt;
&lt;p&gt;①在style.xml中自定义style：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 默认Activity跳转动画 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;default_animation&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;mce_bogus&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;parent&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@android:style/Animation.Activity&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android:activityOpenEnterAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/default_anim_in&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android:activityOpenExitAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/anim_stay&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android:activityCloseEnterAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/anim_stay&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android:activityCloseExitAnimation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@anim/default_anim_out&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4个item分别代表:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity A跳转到Activity B时Activity B进入动画&lt;/li&gt;
&lt;li&gt;Activity A跳转到Activity B时Activity A退出动画&lt;/li&gt;
&lt;li&gt;Activity B返回Activity A时Activity A的进入动画&lt;/li&gt;
&lt;li&gt;Activity B返回Activity A时ActivityB的退出动画&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;②AppTheme怎加如下节点:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android:windowAnimationStyle&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@style/default_animation&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;③AndroidManifest文件中找到application节点，增加主题设置&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android:theme=&quot;@style/AppTheme&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;定义对话框风格的Activity&quot;&gt;&lt;a href=&quot;#定义对话框风格的Activity&quot; class=&quot;headerlink&quot; title=&quot;定义对话框风格的Activity&quot;&gt;&lt;/a&gt;定义对话框风格的Activity&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;通常Activity是占满全屏的，根据需要我们可以将Activity设置成对话框风格的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设置Activity的theme为“@android:style/Theme.Dialog”。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;#Activity间传递数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Activity间传递数据是借助Intent（内部为Bundle）实现的&lt;/p&gt;
&lt;p&gt;在使用Bundle传递数据时，要注意，Bundle的大小是有限制的小于0.5MB，如果大于这个值 是会报TransactionTooLargeException异常的！！！（未验证）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.xamarin.xyz/categories/Android/"/>
    
    
      <category term="Activity" scheme="http://www.xamarin.xyz/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>Xamarin.Android Activity入门介绍</title>
    <link href="http://www.xamarin.xyz/2016/04/28/activity1/"/>
    <id>http://www.xamarin.xyz/2016/04/28/activity1/</id>
    <published>2016-04-28T06:29:02.000Z</published>
    <updated>2016-05-02T02:58:58.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文将对Android四大组件之一的Activity进行简单介绍。&lt;/p&gt;
&lt;p&gt;Activity是一个应用程序的组件，他在屏幕上提供了一个区域，允许用户在上面做一些交互性的操作， 比如打电话，照相，发送邮件，或者显示一个地图！Activity可以理解成一个绘制用户界面的窗口， 而这个窗口可以填满整个屏幕，也可能比屏幕小或者浮动在其他窗口的上方！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Activity生命周期介绍&quot;&gt;&lt;a href=&quot;#Activity生命周期介绍&quot; class=&quot;headerlink&quot; title=&quot;Activity生命周期介绍&quot;&gt;&lt;/a&gt;Activity生命周期介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://developer.xamarin.com/guides/android/application_fundamentals/activity_lifecycle/Images/image2.png&quot; alt=&quot;Activity生命周期&quot;&gt;&lt;/p&gt;
&lt;p&gt;建议自己写Demo查看各个生命周期调用时间。&lt;/p&gt;
&lt;h2 id=&quot;OnCreate&quot;&gt;&lt;a href=&quot;#OnCreate&quot; class=&quot;headerlink&quot; title=&quot;OnCreate&quot;&gt;&lt;/a&gt;OnCreate&lt;/h2&gt;&lt;p&gt;当Activity创建时会调用此方法，是我们必须要重写的方法，该方法传入一个Bundle对象作为参数。如果bundle不为null，说明当前Activity是重新启动。可以通过bundle读取我们之前保存的数据，做相应的数据恢复工作。在这个方法中要执行的操作是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Creating views&lt;/p&gt;
&lt;p&gt;Initializing variables&lt;/p&gt;
&lt;p&gt;Binding static data to lists&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;OnStart&quot;&gt;&lt;a href=&quot;#OnStart&quot; class=&quot;headerlink&quot; title=&quot;OnStart&quot;&gt;&lt;/a&gt;OnStart&lt;/h2&gt;&lt;p&gt;OnCreate执行结束会掉用OnStart方法，可以根据具体应用情况重写该方法。&lt;/p&gt;
&lt;h2 id=&quot;OnResume&quot;&gt;&lt;a href=&quot;#OnResume&quot; class=&quot;headerlink&quot; title=&quot;OnResume&quot;&gt;&lt;/a&gt;OnResume&lt;/h2&gt;&lt;p&gt;当一个Activity初始化完成准备显示给用户时会掉用OnResume方法。此时Activity进入活动状态。在这个方法中我们要做的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ramping up frame rates (a common task in game building)&lt;/p&gt;
&lt;p&gt;Starting animations&lt;/p&gt;
&lt;p&gt;Listening for GPS updates&lt;/p&gt;
&lt;p&gt;Display any relevant alerts or dialogs&lt;/p&gt;
&lt;p&gt;Wire up external event handlers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;OnPause&quot;&gt;&lt;a href=&quot;#OnPause&quot; class=&quot;headerlink&quot; title=&quot;OnPause&quot;&gt;&lt;/a&gt;OnPause&lt;/h2&gt;&lt;p&gt;当Activity进入后台或者Activity被遮挡时（Dialog风格的Activity）掉用此方法。OnPause方法之行过后Activity可以有两种不同的状态，进入OnResume返回前台或者进入OnStop方法，重写这个方法我们要做的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Commit unsaved changes to persistent data&lt;/p&gt;
&lt;p&gt;Destroy or clean up other objects consuming resources&lt;/p&gt;
&lt;p&gt;Ramp down frame rates and pausing animations&lt;/p&gt;
&lt;p&gt;Unregister external event handlers or notification handlers (i.e. those that are tied to a service). This must be done to prevent Activity memory leaks.&lt;/p&gt;
&lt;p&gt;Likewise, if the Activity has displayed any dialogs or alerts, they must be cleaned up with the .Dismiss() method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后一条，如果不关闭已经显示的Dialog会抛异常。&lt;/p&gt;
&lt;h2 id=&quot;OnStop&quot;&gt;&lt;a href=&quot;#OnStop&quot; class=&quot;headerlink&quot; title=&quot;OnStop&quot;&gt;&lt;/a&gt;OnStop&lt;/h2&gt;&lt;p&gt;Activity不再显示时调用此方法，此时Activity仍存留在内存中。&lt;/p&gt;
&lt;h2 id=&quot;OnDestroy&quot;&gt;&lt;a href=&quot;#OnDestroy&quot; class=&quot;headerlink&quot; title=&quot;OnDestroy&quot;&gt;&lt;/a&gt;OnDestroy&lt;/h2&gt;&lt;p&gt;Activity销毁调用次方法，此时Activity已经完全从内存中移除，我们应该重写此方法，释放占用的资源。&lt;/p&gt;
&lt;h2 id=&quot;OnRestart&quot;&gt;&lt;a href=&quot;#OnRestart&quot; class=&quot;headerlink&quot; title=&quot;OnRestart&quot;&gt;&lt;/a&gt;OnRestart&lt;/h2&gt;&lt;p&gt;是OnStop状态的Activity重新显示给用户会进入OnRestart方法。如按下Home键应用进入后台，重新打开应用，Activity重新启动。&lt;/p&gt;
&lt;h1 id=&quot;Activity使用&quot;&gt;&lt;a href=&quot;#Activity使用&quot; class=&quot;headerlink&quot; title=&quot;Activity使用&quot;&gt;&lt;/a&gt;Activity使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Android中的四大组件，只要你定义了就必须在AndroidManifest.xml中对这个组件进行声明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;定义Activity&quot;&gt;&lt;a href=&quot;#定义Activity&quot; class=&quot;headerlink&quot; title=&quot;定义Activity&quot;&gt;&lt;/a&gt;定义Activity&lt;/h2&gt;&lt;p&gt;我们自定义的Activity一定要继承Activity或其子类（如AppCompatActivity），并重写相关方法。OnCreate是必须重写的，在OnCreate中调用SetContentView方法加载相关联的视图。&lt;/p&gt;
&lt;h2 id=&quot;声明Activity&quot;&gt;&lt;a href=&quot;#声明Activity&quot; class=&quot;headerlink&quot; title=&quot;声明Activity&quot;&gt;&lt;/a&gt;声明Activity&lt;/h2&gt;&lt;p&gt;在AndroidManifest中增加Activity节点。&lt;br&gt;&lt;a href=&quot;http://www.android-doc.com/guide/topics/manifest/activity-element.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin.Android中我们可以通过声明特性进行组件的声明。&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Activity (Label = &lt;span class=&quot;string&quot;&gt;&quot;activity1&quot;&lt;/span&gt;, MainLauncher = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, Icon = &lt;span class=&quot;string&quot;&gt;&quot;@mipmap/icon&quot;&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;项目编译时会根据我们声明的特性生成新的AndroidManifest.xml文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可在项目目录下 /项目名/obj/Debug or Release/android下查看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;启动Activity&quot;&gt;&lt;a href=&quot;#启动Activity&quot; class=&quot;headerlink&quot; title=&quot;启动Activity&quot;&gt;&lt;/a&gt;启动Activity&lt;/h2&gt;&lt;p&gt;启动方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显式启动 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent (this, typeof(Activity2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;StartActivity(typeof(Activity2));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Intent对象可以在两个Activity间传递数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐式启动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;给出Java示例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.runoob.com/wp-content/uploads/2015/08/291262381.jpg&quot; alt=&quot;隐式启动&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;生命周期中状态的保存&quot;&gt;&lt;a href=&quot;#生命周期中状态的保存&quot; class=&quot;headerlink&quot; title=&quot;生命周期中状态的保存&quot;&gt;&lt;/a&gt;生命周期中状态的保存&lt;/h1&gt;&lt;h2 id=&quot;Bundle保存状态&quot;&gt;&lt;a href=&quot;#Bundle保存状态&quot; class=&quot;headerlink&quot; title=&quot;Bundle保存状态&quot;&gt;&lt;/a&gt;Bundle保存状态&lt;/h2&gt;&lt;p&gt;通过OnSaveInstanceState、OnRestoreInstanceState两个方法管理保存的状态（不是一定会执行的）&lt;/p&gt;
&lt;p&gt;以下代码，改变默认创建的Android项目，是一个简单保存状态的例子，可以通过横竖屏切换掉用OnSaveInstanceState、OnRestoreInstanceState方法。（这里提到横竖屏切换，我们可以为一个Activity分别提供不同情况下的布局文件，创建两个布局文件夹：layout-land横屏,layout-port竖屏 然后把两套布局文件丢这两文件夹里，文件名一样，Android就会自行判断加载相应布局）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Activity (Label = &amp;quot;activity1&amp;quot;, MainLauncher = true, Icon = &amp;quot;@mipmap/icon&amp;quot;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public class MainActivity : Activity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int count = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Button button;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		protected override void OnCreate (Bundle savedInstanceState)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			base.OnCreate (savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// Set our view from the &amp;quot;main&amp;quot; layout resource&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			SetContentView (Resource.Layout.Main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// Get our button from the layout resource,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// and attach an event to it&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			button = FindViewById&amp;lt;Button&amp;gt; (Resource.Id.myButton);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			button.Click += delegate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				button.Text = string.Format (&amp;quot;&amp;#123;0&amp;#125; clicks!&amp;quot;, count++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		protected override void OnSaveInstanceState (Bundle outState)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			base.OnSaveInstanceState (outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			outState.PutInt (&amp;quot;count&amp;quot;, count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		protected override void OnRestoreInstanceState (Bundle savedInstanceState)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			base.OnRestoreInstanceState (savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			count = savedInstanceState.GetInt (&amp;quot;count&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			button.Text = string.Format (&amp;quot;&amp;#123;0&amp;#125; clicks!&amp;quot;, count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;事实上我们并不需要在OnSaveInstanceState方法中保存每个view的状态，只要指定view的ID，android系统会自动帮我们保存view的状态，如我们在布局文件中了添加一个EditText视图，并指定ID属性，运行项目，修改EditText的值，切换屏幕方向EditText中的值依然保存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.xamarin.com/guides/android/application_fundamentals/activity_lifecycle/Images/image3-sml.png&quot; alt=&quot;Bundle State&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图所示，Activity由Resumed状态变为Destroyed状态可能会调用OnSaveInstanceState方法，Created到Resumed可能会调用OnRestoreInstanceState方法。&lt;/p&gt;
&lt;p&gt;使用Bundle保存状态的限制&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is not called in all cases. For example, pressing home or back to exit an Activity will not result in OnSaveInstanceState being called.&lt;/p&gt;
&lt;p&gt;The bundle passed into OnSaveInstanceState is not designed for large objects, such as images. In the case of large objects, saving the object from OnRetainNonConfigurationInstance is preferable, as discussed below.&lt;/p&gt;
&lt;p&gt;Data saved by using the bundle is serialized, which can lead to delays.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;复杂数据的持久化&quot;&gt;&lt;a href=&quot;#复杂数据的持久化&quot; class=&quot;headerlink&quot; title=&quot;复杂数据的持久化&quot;&gt;&lt;/a&gt;复杂数据的持久化&lt;/h2&gt;&lt;p&gt;由于Bundle的限制，只适合保存简单的数据值如：int，string等。对于复杂数据的保存我们可以通过重写OnRetainNonConfigurationInstance返回一个Java.Lang.Object，恢复数据时LastNonConfigurationInstance返回保存的数据。这里列出一个Xamarin官网的例子：&lt;/p&gt;
&lt;p&gt;1.先定义我们要返回的类型&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class TweetListWrapper : Java.Lang.Object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public string[] Tweets &amp;#123; get; set; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.Activity中处理数据&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TweetListWrapper _savedInstance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		protected override void OnCreate (Bundle bundle)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			base.OnCreate (bundle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var tweetsWrapper = LastNonConfigurationInstance as TweetListWrapper;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if (tweetsWrapper != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				PopulateTweetList (tweetsWrapper.Tweets);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				SearchTwitter (&amp;quot;xamarin&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void SearchTwitter (string text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			string searchUrl = String.Format (&amp;quot;http://search.twitter.com/search.json?&amp;quot; + &amp;quot;q=&amp;#123;0&amp;#125;&amp;amp;rpp=10&amp;amp;include_entities=false&amp;amp;&amp;quot; + &amp;quot;result_type=mixed&amp;quot;, text);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Console.WriteLine (searchUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var httpReq = (HttpWebRequest)HttpWebRequest.Create (new Uri (searchUrl));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			httpReq.BeginGetResponse (new AsyncCallback (ResponseCallback), httpReq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		void ResponseCallback (IAsyncResult ar)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var httpReq = (HttpWebRequest)ar.AsyncState;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			using (var httpRes = (HttpWebResponse)httpReq.EndGetResponse (ar)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ParseResults (httpRes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		void ParseResults (HttpWebResponse httpRes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var s = httpRes.GetResponseStream ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var j = (JsonObject)JsonObject.Load (s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var results = (from result in (JsonArray)j [&amp;quot;results&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			               let jResult = result as JsonObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			               select jResult [&amp;quot;text&amp;quot;].ToString ()).ToArray ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			RunOnUiThread (() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				PopulateTweetList (results);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[Obsolete (&amp;quot;deprecated&amp;quot;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public override Java.Lang.Object OnRetainNonConfigurationInstance ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			base.OnRetainNonConfigurationInstance ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Console.WriteLine (&amp;quot;OnRetainNonConfigurationInstance&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return _savedInstance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		void PopulateTweetList (string[] results)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ListAdapter = new ArrayAdapter&amp;lt;string&amp;gt; (this, Android.Resource.Layout.SimpleListItem1, results);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_savedInstance = new TweetListWrapper&amp;#123; Tweets = results &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以注意到OnRetainNonConfigurationInstance方法已经是过期的，查看文档可以看到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Called by the system, as part of destroying an activity due to a configuration change, when it is known that a new instance will immediately be created for the new configuration. You can return any object you like here, including the activity instance itself, which can later be retrieved by calling Activity.LastNonConfigurationInstance in the new activity instance. If you are targeting Build+VERSION_CODES.Honeycomb or later, consider instead using a Fragment with Fragment.RetainInstance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以用Fragment.RetainInstance完成同样的事情。&lt;/p&gt;
&lt;h1 id=&quot;系统提供常用Activity&quot;&gt;&lt;a href=&quot;#系统提供常用Activity&quot; class=&quot;headerlink&quot; title=&quot;系统提供常用Activity&quot;&gt;&lt;/a&gt;系统提供常用Activity&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//1.拨打电话&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 给移动客服10086拨打电话&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.Parse (&amp;quot;tel:10086&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent (Intent.ActionDial, uri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//2.发送短信&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 给10086发送内容为“Hello”的短信&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.Parse (&amp;quot;smsto:10086&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent (Intent.ActionSendto, uri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra (&amp;quot;sms_body&amp;quot;, &amp;quot;Hello&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//3.发送彩信（相当于发送带附件的短信）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(Intent.ActionSend);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;sms_body&amp;quot;, &amp;quot;Hello&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.Parse(&amp;quot;content://media/external/images/media/23&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(Intent.ExtraStream, uri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetType(&amp;quot;image/png&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//4.打开浏览器:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.Parse (&amp;quot;http://www.baidu.com&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent (Intent.ActionView, uri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//5.多媒体播放:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(Intent.ActionView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.Parse(&amp;quot;file:///sdcard/foo.mp3&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetDataAndType(uri, &amp;quot;audio/mp3&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//6.打开摄像头拍照:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 打开拍照程序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(MediaStore.ActionImageCapture); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivityForResult(intent, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 取出照片数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle extras = intent.Extras; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bitmap bitmap = (Bitmap) extras.Get(&amp;quot;data&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//另一种:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//调用系统相机应用程序，并存储拍下来的照片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(MediaStore.ActionImageCapture); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var time = Calendar.GetInstance().TimeInMillis;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(MediaStore.ExtraOutput, Uri.FromFile(new File(path, time + &amp;quot;.jpg&amp;quot;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivityForResult(intent, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//7.获取并剪切图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取并剪切图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(Intent.ActionGetContent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetType(&amp;quot;image/*&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;crop&amp;quot;, &amp;quot;true&amp;quot;); // 开启剪切&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;aspectX&amp;quot;, 1); // 剪切的宽高比为1：2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;aspectY&amp;quot;, 2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;outputX&amp;quot;, 20); // 保存图片的宽和高&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;outputY&amp;quot;, 40); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;output&amp;quot;, Uri.FromFile(new File(&amp;quot;/mnt/sdcard/temp&amp;quot;))); // 保存路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;outputFormat&amp;quot;, &amp;quot;JPEG&amp;quot;);// 返回格式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivityForResult(intent, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 剪切特定图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(&amp;quot;com.android.camera.action.CROP&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetClassName(&amp;quot;com.android.camera&amp;quot;, &amp;quot;com.android.camera.CropImage&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetData(Uri.FromFile(new File(&amp;quot;/mnt/sdcard/temp&amp;quot;))); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;outputX&amp;quot;, 1); // 剪切的宽高比为1：2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;outputY&amp;quot;, 2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;aspectX&amp;quot;, 20); // 保存图片的宽和高&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;aspectY&amp;quot;, 40);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;scale&amp;quot;, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;noFaceDetection&amp;quot;, true); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.PutExtra(&amp;quot;output&amp;quot;, Uri.Parse(&amp;quot;file:///mnt/sdcard/temp&amp;quot;)); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivityForResult(intent, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//8.打开Google Market &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 打开Google Market直接进入该程序的详细页面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.Parse (&amp;quot;market://details?id=&amp;quot; + &amp;quot;com.demo.app&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent (Intent.ActionView, uri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//9.进入手机设置界面:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 进入无线网络设置界面（其它可以举一反三）  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent (Android.Provider.Settings.ActionWirelessSettings);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivityForResult (intent, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//10.安装apk:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri installUri = Uri.FromParts(&amp;quot;package&amp;quot;, &amp;quot;xxx&amp;quot;, null);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent it = new Intent(Intent.ACTION_PACKAGE_ADDED, installUri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity(it);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//11.卸载apk:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri uri = Uri.FromParts(&amp;quot;package&amp;quot;, strPackageName, null);      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent it = new Intent(Intent.ACTION_DELETE, uri);      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity(it); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//12.进入联系人页面:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetAction (Intent.ActionView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetData (Android.Provider.ContactsContract.Contacts.ContentUri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//13.查看指定联系人:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri personUri = ContentUris.WithAppendedId (Android.Provider.ContactsContract.Contacts.ContentUri, id);//id联系人ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetAction (Intent.ActionView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.SetData (personUri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StartActivity (intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将对Android四大组件之一的Activity进行简单介绍。&lt;/p&gt;
&lt;p&gt;Activity是一个应用程序的组件，他在屏幕上提供了一个区域，允许用户在上面做一些交互性的操作， 比如打电话，照相，发送邮件，或者显示一个地图！Activity可以理解成一个绘制用户界面的窗口， 而这个窗口可以填满整个屏幕，也可能比屏幕小或者浮动在其他窗口的上方！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.xamarin.xyz/categories/Android/"/>
    
    
      <category term="Activity" scheme="http://www.xamarin.xyz/tags/Activity/"/>
    
  </entry>
  
</feed>
